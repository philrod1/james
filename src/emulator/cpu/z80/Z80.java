package emulator.cpu.z80;


import emulator.machine.Machine;

public class Z80 {

	public static final int Z80_IGNORE_INT = -1; /* Ignore interrupt */
	public static final int Z80_NMI_INT = -2; /* Execute NMI */
	public static final int S_FLAG = 0x80;
	public static final int Z_FLAG = 0x40;
	public static final int H_FLAG = 0x10;
	public static final int V_FLAG = 0x04;
	public static final int N_FLAG = 0x02;
	public static final int C_FLAG = 0x01;

	private final static short[] DAATable = { 68, 256, 512, 772, 1024, 1284, 1540,
			1792, 2056, 2316, 4112, 4372, 4628, 4880, 5140, 5392, 4096, 4356,
			4612, 4864, 5124, 5376, 5632, 5892, 6156, 6408, 8240, 8500, 8756,
			9008, 9268, 9520, 8224, 8484, 8740, 8992, 9252, 9504, 9760, 10020,
			10284, 10536, 12340, 12592, 12848, 13108, 13360, 13620, 12324,
			12576, 12832, 13092, 13344, 13604, 13860, 14112, 14376, 14636,
			16400, 16660, 16916, 17168, 17428, 17680, 16384, 16644, 16900,
			17152, 17412, 17664, 17920, 18180, 18444, 18696, 20500, 20752,
			21008, 21268, 21520, 21780, 20484, 20736, 20992, 21252, 21504,
			21764, 22020, 22272, 22536, 22796, 24628, 24880, 25136, 25396,
			25648, 25908, 24612, 24864, 25120, 25380, 25632, 25892, 26148,
			26400, 26664, 26924, 28720, 28980, 29236, 29488, 29748, 30000,
			28704, 28964, 29220, 29472, 29732, 29984, 30240, 30500, 30764,
			31016, -32624, -32364, -32108, -31856, -31596, -31344, -32640,
			-32380, -32124, -31872, -31612, -31360, -31104, -30844, -30580,
			-30328, -28524, -28272, -28016, -27756, -27504, -27244, -28540,
			-28288, -28032, -27772, -27520, -27260, -27004, -26752, -26488,
			-26228, 85, 273, 529, 789, 1041, 1301, 69, 257, 513, 773, 1025,
			1285, 1541, 1793, 2057, 2317, 4113, 4373, 4629, 4881, 5141, 5393,
			4097, 4357, 4613, 4865, 5125, 5377, 5633, 5893, 6157, 6409, 8241,
			8501, 8757, 9009, 9269, 9521, 8225, 8485, 8741, 8993, 9253, 9505,
			9761, 10021, 10285, 10537, 12341, 12593, 12849, 13109, 13361,
			13621, 12325, 12577, 12833, 13093, 13345, 13605, 13861, 14113,
			14377, 14637, 16401, 16661, 16917, 17169, 17429, 17681, 16385,
			16645, 16901, 17153, 17413, 17665, 17921, 18181, 18445, 18697,
			20501, 20753, 21009, 21269, 21521, 21781, 20485, 20737, 20993,
			21253, 21505, 21765, 22021, 22273, 22537, 22797, 24629, 24881,
			25137, 25397, 25649, 25909, 24613, 24865, 25121, 25381, 25633,
			25893, 26149, 26401, 26665, 26925, 28721, 28981, 29237, 29489,
			29749, 30001, 28705, 28965, 29221, 29473, 29733, 29985, 30241,
			30501, 30765, 31017, -32623, -32363, -32107, -31855, -31595,
			-31343, -32639, -32379, -32123, -31871, -31611, -31359, -31103,
			-30843, -30579, -30327, -28523, -28271, -28015, -27755, -27503,
			-27243, -28539, -28287, -28031, -27771, -27519, -27259, -27003,
			-26751, -26487, -26227, -24395, -24143, -23887, -23627, -23375,
			-23115, -24411, -24159, -23903, -23643, -23391, -23131, -22875,
			-22623, -22359, -22099, -20303, -20043, -19787, -19535, -19275,
			-19023, -20319, -20059, -19803, -19551, -19291, -19039, -18783,
			-18523, -18259, -18007, -16235, -15983, -15727, -15467, -15215,
			-14955, -16251, -15999, -15743, -15483, -15231, -14971, -14715,
			-14463, -14199, -13939, -12143, -11883, -11627, -11375, -11115,
			-10863, -12159, -11899, -11643, -11391, -11131, -10879, -10623,
			-10363, -10099, -9847, -8015, -7755, -7499, -7247, -6987, -6735,
			-8031, -7771, -7515, -7263, -7003, -6751, -6495, -6235, -5971,
			-5719, -3915, -3663, -3407, -3147, -2895, -2635, -3931, -3679,
			-3423, -3163, -2911, -2651, -2395, -2143, -1879, -1619, 85, 273,
			529, 789, 1041, 1301, 69, 257, 513, 773, 1025, 1285, 1541, 1793,
			2057, 2317, 4113, 4373, 4629, 4881, 5141, 5393, 4097, 4357, 4613,
			4865, 5125, 5377, 5633, 5893, 6157, 6409, 8241, 8501, 8757, 9009,
			9269, 9521, 8225, 8485, 8741, 8993, 9253, 9505, 9761, 10021, 10285,
			10537, 12341, 12593, 12849, 13109, 13361, 13621, 12325, 12577,
			12833, 13093, 13345, 13605, 13861, 14113, 14377, 14637, 16401,
			16661, 16917, 17169, 17429, 17681, 16385, 16645, 16901, 17153,
			17413, 17665, 17921, 18181, 18445, 18697, 20501, 20753, 21009,
			21269, 21521, 21781, 20485, 20737, 20993, 21253, 21505, 21765,
			22021, 22273, 22537, 22797, 24629, 24881, 25137, 25397, 25649,
			25909, 1540, 1792, 2056, 2316, 2572, 2824, 3084, 3336, 3592, 3852,
			4112, 4372, 4628, 4880, 5140, 5392, 5632, 5892, 6156, 6408, 6664,
			6924, 7176, 7436, 7692, 7944, 8240, 8500, 8756, 9008, 9268, 9520,
			9760, 10020, 10284, 10536, 10792, 11052, 11304, 11564, 11820,
			12072, 12340, 12592, 12848, 13108, 13360, 13620, 13860, 14112,
			14376, 14636, 14892, 15144, 15404, 15656, 15912, 16172, 16400,
			16660, 16916, 17168, 17428, 17680, 17920, 18180, 18444, 18696,
			18952, 19212, 19464, 19724, 19980, 20232, 20500, 20752, 21008,
			21268, 21520, 21780, 22020, 22272, 22536, 22796, 23052, 23304,
			23564, 23816, 24072, 24332, 24628, 24880, 25136, 25396, 25648,
			25908, 26148, 26400, 26664, 26924, 27180, 27432, 27692, 27944,
			28200, 28460, 28720, 28980, 29236, 29488, 29748, 30000, 30240,
			30500, 30764, 31016, 31272, 31532, 31784, 32044, 32300, 32552,
			-32624, -32364, -32108, -31856, -31596, -31344, -31104, -30844,
			-30580, -30328, -30072, -29812, -29560, -29300, -29044, -28792,
			-28524, -28272, -28016, -27756, -27504, -27244, -27004, -26752,
			-26488, -26228, -25972, -25720, -25460, -25208, -24952, -24692, 85,
			273, 529, 789, 1041, 1301, 1541, 1793, 2057, 2317, 2573, 2825,
			3085, 3337, 3593, 3853, 4113, 4373, 4629, 4881, 5141, 5393, 5633,
			5893, 6157, 6409, 6665, 6925, 7177, 7437, 7693, 7945, 8241, 8501,
			8757, 9009, 9269, 9521, 9761, 10021, 10285, 10537, 10793, 11053,
			11305, 11565, 11821, 12073, 12341, 12593, 12849, 13109, 13361,
			13621, 13861, 14113, 14377, 14637, 14893, 15145, 15405, 15657,
			15913, 16173, 16401, 16661, 16917, 17169, 17429, 17681, 17921,
			18181, 18445, 18697, 18953, 19213, 19465, 19725, 19981, 20233,
			20501, 20753, 21009, 21269, 21521, 21781, 22021, 22273, 22537,
			22797, 23053, 23305, 23565, 23817, 24073, 24333, 24629, 24881,
			25137, 25397, 25649, 25909, 26149, 26401, 26665, 26925, 27181,
			27433, 27693, 27945, 28201, 28461, 28721, 28981, 29237, 29489,
			29749, 30001, 30241, 30501, 30765, 31017, 31273, 31533, 31785,
			32045, 32301, 32553, -32623, -32363, -32107, -31855, -31595,
			-31343, -31103, -30843, -30579, -30327, -30071, -29811, -29559,
			-29299, -29043, -28791, -28523, -28271, -28015, -27755, -27503,
			-27243, -27003, -26751, -26487, -26227, -25971, -25719, -25459,
			-25207, -24951, -24691, -24395, -24143, -23887, -23627, -23375,
			-23115, -22875, -22623, -22359, -22099, -21843, -21591, -21331,
			-21079, -20823, -20563, -20303, -20043, -19787, -19535, -19275,
			-19023, -18783, -18523, -18259, -18007, -17751, -17491, -17239,
			-16979, -16723, -16471, -16235, -15983, -15727, -15467, -15215,
			-14955, -14715, -14463, -14199, -13939, -13683, -13431, -13171,
			-12919, -12663, -12403, -12143, -11883, -11627, -11375, -11115,
			-10863, -10623, -10363, -10099, -9847, -9591, -9331, -9079, -8819,
			-8563, -8311, -8015, -7755, -7499, -7247, -6987, -6735, -6495,
			-6235, -5971, -5719, -5463, -5203, -4951, -4691, -4435, -4183,
			-3915, -3663, -3407, -3147, -2895, -2635, -2395, -2143, -1879,
			-1619, -1363, -1111, -851, -599, -343, -83, 85, 273, 529, 789,
			1041, 1301, 1541, 1793, 2057, 2317, 2573, 2825, 3085, 3337, 3593,
			3853, 4113, 4373, 4629, 4881, 5141, 5393, 5633, 5893, 6157, 6409,
			6665, 6925, 7177, 7437, 7693, 7945, 8241, 8501, 8757, 9009, 9269,
			9521, 9761, 10021, 10285, 10537, 10793, 11053, 11305, 11565, 11821,
			12073, 12341, 12593, 12849, 13109, 13361, 13621, 13861, 14113,
			14377, 14637, 14893, 15145, 15405, 15657, 15913, 16173, 16401,
			16661, 16917, 17169, 17429, 17681, 17921, 18181, 18445, 18697,
			18953, 19213, 19465, 19725, 19981, 20233, 20501, 20753, 21009,
			21269, 21521, 21781, 22021, 22273, 22537, 22797, 23053, 23305,
			23565, 23817, 24073, 24333, 24629, 24881, 25137, 25397, 25649,
			25909, 70, 258, 514, 774, 1026, 1286, 1542, 1794, 2058, 2318, 1026,
			1286, 1542, 1794, 2058, 2318, 4098, 4358, 4614, 4866, 5126, 5378,
			5634, 5894, 6158, 6410, 5126, 5378, 5634, 5894, 6158, 6410, 8226,
			8486, 8742, 8994, 9254, 9506, 9762, 10022, 10286, 10538, 9254,
			9506, 9762, 10022, 10286, 10538, 12326, 12578, 12834, 13094, 13346,
			13606, 13862, 14114, 14378, 14638, 13346, 13606, 13862, 14114,
			14378, 14638, 16386, 16646, 16902, 17154, 17414, 17666, 17922,
			18182, 18446, 18698, 17414, 17666, 17922, 18182, 18446, 18698,
			20486, 20738, 20994, 21254, 21506, 21766, 22022, 22274, 22538,
			22798, 21506, 21766, 22022, 22274, 22538, 22798, 24614, 24866,
			25122, 25382, 25634, 25894, 26150, 26402, 26666, 26926, 25634,
			25894, 26150, 26402, 26666, 26926, 28706, 28966, 29222, 29474,
			29734, 29986, 30242, 30502, 30766, 31018, 29734, 29986, 30242,
			30502, 30766, 31018, -32638, -32378, -32122, -31870, -31610,
			-31358, -31102, -30842, -30578, -30326, -31610, -31358, -31102,
			-30842, -30578, -30326, -28538, -28286, -28030, -27770, -27518,
			-27258, -27002, -26750, -26486, -26226, 13347, 13607, 13863, 14115,
			14379, 14639, 16387, 16647, 16903, 17155, 17415, 17667, 17923,
			18183, 18447, 18699, 17415, 17667, 17923, 18183, 18447, 18699,
			20487, 20739, 20995, 21255, 21507, 21767, 22023, 22275, 22539,
			22799, 21507, 21767, 22023, 22275, 22539, 22799, 24615, 24867,
			25123, 25383, 25635, 25895, 26151, 26403, 26667, 26927, 25635,
			25895, 26151, 26403, 26667, 26927, 28707, 28967, 29223, 29475,
			29735, 29987, 30243, 30503, 30767, 31019, 29735, 29987, 30243,
			30503, 30767, 31019, -32637, -32377, -32121, -31869, -31609,
			-31357, -31101, -30841, -30577, -30325, -31609, -31357, -31101,
			-30841, -30577, -30325, -28537, -28285, -28029, -27769, -27517,
			-27257, -27001, -26749, -26485, -26225, -27517, -27257, -27001,
			-26749, -26485, -26225, -24409, -24157, -23901, -23641, -23389,
			-23129, -22873, -22621, -22357, -22097, -23389, -23129, -22873,
			-22621, -22357, -22097, -20317, -20057, -19801, -19549, -19289,
			-19037, -18781, -18521, -18257, -18005, -19289, -19037, -18781,
			-18521, -18257, -18005, -16249, -15997, -15741, -15481, -15229,
			-14969, -14713, -14461, -14197, -13937, -15229, -14969, -14713,
			-14461, -14197, -13937, -12157, -11897, -11641, -11389, -11129,
			-10877, -10621, -10361, -10097, -9845, -11129, -10877, -10621,
			-10361, -10097, -9845, -8029, -7769, -7513, -7261, -7001, -6749,
			-6493, -6233, -5969, -5717, -7001, -6749, -6493, -6233, -5969,
			-5717, -3929, -3677, -3421, -3161, -2909, -2649, -2393, -2141,
			-1877, -1617, -2909, -2649, -2393, -2141, -1877, -1617, 71, 259,
			515, 775, 1027, 1287, 1543, 1795, 2059, 2319, 1027, 1287, 1543,
			1795, 2059, 2319, 4099, 4359, 4615, 4867, 5127, 5379, 5635, 5895,
			6159, 6411, 5127, 5379, 5635, 5895, 6159, 6411, 8227, 8487, 8743,
			8995, 9255, 9507, 9763, 10023, 10287, 10539, 9255, 9507, 9763,
			10023, 10287, 10539, 12327, 12579, 12835, 13095, 13347, 13607,
			13863, 14115, 14379, 14639, 13347, 13607, 13863, 14115, 14379,
			14639, 16387, 16647, 16903, 17155, 17415, 17667, 17923, 18183,
			18447, 18699, 17415, 17667, 17923, 18183, 18447, 18699, 20487,
			20739, 20995, 21255, 21507, 21767, 22023, 22275, 22539, 22799,
			21507, 21767, 22023, 22275, 22539, 22799, 24615, 24867, 25123,
			25383, 25635, 25895, 26151, 26403, 26667, 26927, 25635, 25895,
			26151, 26403, 26667, 26927, 28707, 28967, 29223, 29475, 29735,
			29987, 30243, 30503, 30767, 31019, 29735, 29987, 30243, 30503,
			30767, 31019, -32637, -32377, -32121, -31869, -31609, -31357,
			-31101, -30841, -30577, -30325, -31609, -31357, -31101, -30841,
			-30577, -30325, -28537, -28285, -28029, -27769, -27517, -27257,
			-27001, -26749, -26485, -26225, -27517, -27257, -27001, -26749,
			-26485, -26225, -1346, -1094, -834, -582, -326, -66, 70, 258, 514,
			774, 1026, 1286, 1542, 1794, 2058, 2318, 2590, 2842, 3102, 3354,
			3610, 3870, 4098, 4358, 4614, 4866, 5126, 5378, 5634, 5894, 6158,
			6410, 6682, 6942, 7194, 7454, 7710, 7962, 8226, 8486, 8742, 8994,
			9254, 9506, 9762, 10022, 10286, 10538, 10810, 11070, 11322, 11582,
			11838, 12090, 12326, 12578, 12834, 13094, 13346, 13606, 13862,
			14114, 14378, 14638, 14910, 15162, 15422, 15674, 15930, 16190,
			16386, 16646, 16902, 17154, 17414, 17666, 17922, 18182, 18446,
			18698, 18970, 19230, 19482, 19742, 19998, 20250, 20486, 20738,
			20994, 21254, 21506, 21766, 22022, 22274, 22538, 22798, 23070,
			23322, 23582, 23834, 24090, 24350, 24614, 24866, 25122, 25382,
			25634, 25894, 26150, 26402, 26666, 26926, 27198, 27450, 27710,
			27962, 28218, 28478, 28706, 28966, 29222, 29474, 29734, 29986,
			30242, 30502, 30766, 31018, 31290, 31550, 31802, 32062, 32318,
			32570, -32638, -32378, -32122, -31870, -31610, -31358, -31102,
			-30842, -30578, -30326, -30054, -29794, -29542, -29282, -29026,
			-28774, -28538, -28286, -28030, -27770, 13347, 13607, 13863, 14115,
			14379, 14639, 14911, 15163, 15423, 15675, 15931, 16191, 16387,
			16647, 16903, 17155, 17415, 17667, 17923, 18183, 18447, 18699,
			18971, 19231, 19483, 19743, 19999, 20251, 20487, 20739, 20995,
			21255, 21507, 21767, 22023, 22275, 22539, 22799, 23071, 23323,
			23583, 23835, 24091, 24351, 24615, 24867, 25123, 25383, 25635,
			25895, 26151, 26403, 26667, 26927, 27199, 27451, 27711, 27963,
			28219, 28479, 28707, 28967, 29223, 29475, 29735, 29987, 30243,
			30503, 30767, 31019, 31291, 31551, 31803, 32063, 32319, 32571,
			-32637, -32377, -32121, -31869, -31609, -31357, -31101, -30841,
			-30577, -30325, -30053, -29793, -29541, -29281, -29025, -28773,
			-28537, -28285, -28029, -27769, -27517, -27257, -27001, -26749,
			-26485, -26225, -25953, -25701, -25441, -25189, -24933, -24673,
			-24409, -24157, -23901, -23641, -23389, -23129, -22873, -22621,
			-22357, -22097, -21825, -21573, -21313, -21061, -20805, -20545,
			-20317, -20057, -19801, -19549, -19289, -19037, -18781, -18521,
			-18257, -18005, -17733, -17473, -17221, -16961, -16705, -16453,
			-16249, -15997, -15741, -15481, -15229, -14969, -14713, -14461,
			-14197, -13937, -13665, -13413, -13153, -12901, -12645, -12385,
			-12157, -11897, -11641, -11389, -11129, -10877, -10621, -10361,
			-10097, -9845, -9573, -9313, -9061, -8801, -8545, -8293, -8029,
			-7769, -7513, -7261, -7001, -6749, -6493, -6233, -5969, -5717,
			-5445, -5185, -4933, -4673, -4417, -4165, -3929, -3677, -3421,
			-3161, -2909, -2649, -2393, -2141, -1877, -1617, -1345, -1093,
			-833, -581, -325, -65, 71, 259, 515, 775, 1027, 1287, 1543, 1795,
			2059, 2319, 2591, 2843, 3103, 3355, 3611, 3871, 4099, 4359, 4615,
			4867, 5127, 5379, 5635, 5895, 6159, 6411, 6683, 6943, 7195, 7455,
			7711, 7963, 8227, 8487, 8743, 8995, 9255, 9507, 9763, 10023, 10287,
			10539, 10811, 11071, 11323, 11583, 11839, 12091, 12327, 12579,
			12835, 13095, 13347, 13607, 13863, 14115, 14379, 14639, 14911,
			15163, 15423, 15675, 15931, 16191, 16387, 16647, 16903, 17155,
			17415, 17667, 17923, 18183, 18447, 18699, 18971, 19231, 19483,
			19743, 19999, 20251, 20487, 20739, 20995, 21255, 21507, 21767,
			22023, 22275, 22539, 22799, 23071, 23323, 23583, 23835, 24091,
			24351, 24615, 24867, 25123, 25383, 25635, 25895, 26151, 26403,
			26667, 26927, 27199, 27451, 27711, 27963, 28219, 28479, 28707,
			28967, 29223, 29475, 29735, 29987, 30243, 30503, 30767, 31019,
			31291, 31551, 31803, 32063, 32319, 32571, -32637, -32377, -32121,
			-31869, -31609, -31357, -31101, -30841, -30577, -30325, -30053,
			-29793, -29541, -29281, -29025, -28773, -28537, -28285, -28029,
			-27769, -27517, -27257, -27001, -26749, -26485, -26225 };

	private static final int[] cycles_main = { 4, 10, 7, 6, 4, 4, 7, 4, 4, 11,
			7, 6, 4, 4, 7, 4, 8, 10, 7, 6, 4, 4, 7, 4, 7, 11, 7, 6, 4, 4, 7, 4,
			7, 10, 16, 6, 4, 4, 7, 4, 7, 11, 16, 6, 4, 4, 7, 4, 7, 10, 13, 6,
			11, 11, 10, 4, 7, 11, 13, 6, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4,
			4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7,
			4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 7, 7, 7, 7, 7,
			7, 4, 7, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4,
			4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4,
			4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7, 4, 4, 4, 4, 4, 4, 4, 7,
			4, 4, 4, 4, 4, 4, 4, 7, 4, 5, 10, 10, 10, 10, 11, 7, 11, 5, 4, 10,
			0, 10, 10, 7, 11, 5, 10, 10, 11, 10, 11, 7, 11, 5, 4, 10, 11, 10,
			0, 7, 11, 5, 10, 10, 19, 10, 11, 7, 11, 5, 4, 10, 4, 10, 0, 7, 11,
			5, 10, 10, 4, 10, 11, 7, 11, 5, 6, 10, 4, 10, 0, 7, 11 };

	private static final int[] cycles_cb = { 8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8,
			8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 15, 8,
			8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8,
			15, 8, 8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 12, 8, 8, 8, 8,
			8, 8, 8, 12, 8, 8, 8, 8, 8, 8, 8, 12, 8, 8, 8, 8, 8, 8, 8, 12, 8,
			8, 8, 8, 8, 8, 8, 12, 8, 8, 8, 8, 8, 8, 8, 12, 8, 8, 8, 8, 8, 8, 8,
			12, 8, 8, 8, 8, 8, 8, 8, 12, 8, 8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8,
			8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 15, 8,
			8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8,
			15, 8, 8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8,
			8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 15, 8,
			8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8, 15, 8, 8, 8, 8, 8, 8, 8,
			15, 8, 8, 8, 8, 8, 8, 8, 15, 8 };

	private static final int[] cycles_xx_cb = { 0, 0, 0, 0, 0, 0, 23, 0, 0, 0,
			0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 23,
			0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0,
			0, 23, 0, 0, 0, 0, 0, 0, 0, 23, 0, 20, 20, 20, 20, 20, 20, 20, 20,
			20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
			20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
			20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20,
			20, 20, 20, 20, 20, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 23,
			0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0,
			0, 23, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0,
			0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 23,
			0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0,
			0, 23, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0, 0, 0, 0, 0, 23, 0, 0, 0,
			0, 0, 0, 0, 23, 0 };

	private static final int[] cycles_xx = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0,
			14, 20, 10, 9, 9, 9, 0, 0, 15, 20, 10, 9, 9, 9, 0, 0, 0, 0, 0, 23,
			23, 19, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 9, 19, 0, 0, 0,
			0, 0, 9, 9, 19, 0, 0, 0, 0, 0, 9, 9, 19, 0, 0, 0, 0, 0, 9, 9, 19,
			0, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 19, 19, 19, 19,
			19, 19, 19, 19, 0, 0, 0, 0, 9, 9, 19, 0, 0, 0, 0, 0, 9, 9, 19, 0,
			0, 0, 0, 0, 9, 9, 19, 0, 0, 0, 0, 0, 9, 9, 19, 0, 0, 0, 0, 0, 9, 9,
			19, 0, 0, 0, 0, 0, 9, 9, 19, 0, 0, 0, 0, 0, 9, 9, 19, 0, 0, 0, 0,
			0, 9, 9, 19, 0, 0, 0, 0, 0, 9, 9, 19, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 14, 0, 23, 0, 15, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0 };

	private static final int[] cycles_ed = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 12, 15, 20, 8, 8, 8, 9, 12, 12, 15,
			20, 8, 8, 8, 9, 12, 12, 15, 20, 8, 8, 8, 9, 12, 12, 15, 20, 8, 8,
			8, 9, 12, 12, 15, 20, 8, 8, 8, 18, 12, 12, 15, 20, 8, 8, 8, 18, 12,
			12, 15, 20, 8, 8, 8, 0, 12, 12, 15, 20, 8, 8, 8, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 16, 16, 16, 16, 0, 0, 0, 0, 16, 16, 16, 16, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

	
	private int iCount = 50000;
	private final Z80Regs R      = new Z80Regs();
	private final int[] pTable   = new int[512];
	private final int[] zsTable  = new int[512];
	private final int[] zspTable = new int[512];
	private final Machine machine;

	public Z80(Machine bus) {
		this.machine = bus;
		initTables();
	}

	// IO -------------------------------------------
	/****************************************************************************/
	/* Input a byte from given I/O port */
	/****************************************************************************/
	private char z80_In(int port) {
		return 0;
//		return (char) bus.readPort(port);
	}

	/****************************************************************************/
	/* Output a byte to given I/O port */
	/****************************************************************************/
	private void z80_Out(int port, int value) {
//		bus.writePort(Port, Value);
	}

	/****************************************************************************/
	/* Read a byte from given memory location */
	/****************************************************************************/
	private final char Z80_RDMEM(int a) {
		return (char) machine.memoryRead(a);
	}

	/****************************************************************************/
	/* Write a byte to given memory location */
	/****************************************************************************/
	private final void Z80_WRMEM(int a, int v) {
		machine.memoryWrite(a, (char) v);
	}

	/****************************************************************************/
	/* Z80_RDOP() is identical to Z80_RDMEM() except it is used for reading */
	/* opcodes. In case of system with memory mapped I/O, this function can be */
	/* used to greatly speed up emulation */
	/****************************************************************************/
	private char Z80_RDOP(int a) {
		return (char) machine.memoryRead(a);
	}

	/****************************************************************************/
	/* Z80_RDOP_ARG() is identical to Z80_RDOP() except it is used for reading */
	/* opcode arguments. This difference can be used to support systems that */
	/* use different encoding mechanisms for opcodes and opcode arguments */
	/****************************************************************************/
	private final char Z80_RDOP_ARG(int A) {
		return (char) machine.memoryRead(A);
	}

	/****************************************************************************/
	/* Z80_RDSTACK() is identical to Z80_RDMEM() except it is used for reading */
	/* stack variables. In case of system with memory mapped I/O, this function */
	/* can be used to slightly speed up emulation */
	/****************************************************************************/
	private final char Z80_RDSTACK(int a) {
		return (char) machine.memoryRead(a);
	}

	/****************************************************************************/
	/* Z80_WRSTACK() is identical to Z80_WRMEM() except it is used for writing */
	/* stack variables. In case of system with memory mapped I/O, this function */
	/* can be used to slightly speed up emulation */
	/****************************************************************************/
	private final void Z80_WRSTACK(int a, int v) {
		machine.memoryWrite(a, (char) v);
	}

	// ----------------------------------------------

	private final int M_POP() {
		int i = M_RDSTACK(R.SP) + (M_RDSTACK((R.SP + 1) & 65535) << 8);
		R.SP = (R.SP + 2) & 0xFFFF;
		return i;
	}

	private final void M_PUSH(int Rg) {
		R.SP = (R.SP - 2) & 0xFFFF;
		M_WRSTACK(R.SP, Rg & 0xFF);
		M_WRSTACK((R.SP + 1) & 65535, Rg >> 8);
	}

	private final void M_CALL() {
		int q = M_RDMEM_OPCODE_WORD();
		M_PUSH(R.PC);
		R.PC = q;
		iCount -= 7;
	}

	private final void M_JP() {
		R.PC = M_RDOP_ARG(R.PC) + ((M_RDOP_ARG((R.PC + 1) & 65535)) << 8);

	}

	private final void M_JR() {
		R.PC = (R.PC + (byte) M_RDOP_ARG(R.PC) + 1) & 0xFFFF;
		iCount -= 5;

	}

	private final void M_RET() {
		R.PC = M_POP();
		iCount -= 6;
	}

	private final void M_RST(int Addr) {
		M_PUSH(R.PC);
		R.PC = Addr;
	}

	private final int M_SET(int Bit, int Reg) {
		return Reg | (1 << Bit);
	}

	private final int M_RES(int Bit, int Reg) {
		// return Reg & ~(1 << Bit);
		return Reg & (1 << Bit ^ 0xFFFFFFFF);
	}

	private final void M_BIT(int Bit, int Reg) {
		R.F = (R.F & C_FLAG)
				| H_FLAG
				| (((Reg & (1 << Bit)) != 0) 
						? ((Bit == 7) ? S_FLAG : 0)
						: Z_FLAG);
		// R.F = (R.F & C_FLAG | H_FLAG | ((Reg & 1 << Bit) != 0 ? 0 : Bit == 7 ? S_FLAG : Z_FLAG));
	}

	private final void M_AND(int Reg) {
		R.A &= Reg;
		R.F = zspTable[R.A] | H_FLAG;
	}

	private final void M_OR(int Reg) {
		R.A |= Reg;
		R.F = zspTable[R.A];
	}

	private final void M_XOR(int Reg) {
		R.A ^= Reg;
		R.F = zspTable[R.A];
	}

	private final int M_IN() {
		int Reg = z80_In(R.BC.L);
		R.F = (R.F & C_FLAG) | zspTable[Reg];
		return Reg;
	}

	private final void M_RLCA() {
		R.A = ((R.A << 1) | ((R.A & 0x80) >> 7)) & 0xFF;
		R.F = (R.F & 0xEC) | (R.A & C_FLAG);
	}

	private final void M_RRCA() {
		R.F = (R.F & 0xEC) | (R.A & 0x01);
		R.A = ((R.A >> 1) | (R.A << 7)) & 0xFF;
	}

	private final void M_RLA() {
		int i;
		i = R.F & C_FLAG;
		R.F = (R.F & 0xEC) | ((R.A & 0x80) >> 7);
		R.A = ((R.A << 1) | i) & 0xFF;
	};

	private final void M_RRA() {
		int i;
		i = R.F & C_FLAG;
		R.F = (R.F & 0xEC) | (R.A & 0x01);
		R.A = ((R.A >> 1) | (i << 7)) & 0xFF;
	};

	private final int M_RLC(int Reg) {
		int q = Reg >> 7;
		Reg = ((Reg << 1) | q) & 0xFF;
		R.F = zspTable[Reg] | q;
		return Reg;
	}

	private final int M_RRC(int Reg) {
		int q = Reg & 1;
		Reg = ((Reg >> 1) | (q << 7)) & 0xFF;
		R.F = zspTable[Reg] | q;
		return Reg;
	}

	private final int M_RL(int Reg) {
		int q = Reg >> 7;
		Reg = ((Reg << 1) | (R.F & 1)) & 0xFF;
		R.F = zspTable[Reg] | q;
		return Reg;
	}

	private final int M_RR(int Reg) {
		int q = Reg & 1;
		Reg = ((Reg >> 1) | (R.F << 7)) & 0xFF;
		R.F = zspTable[Reg] | q;
		return Reg;
	}

	@SuppressWarnings("unused")
	private final int M_SLL(int Reg) {
		int q = Reg >> 7;
		Reg = ((Reg << 1) | 1) & 0xFF;
		R.F = zspTable[Reg] | q;
		return Reg;
	}

	private final int M_SLA(int Reg) {
		int q = Reg >> 7;
		Reg = (Reg << 1) & 0xFF;
		R.F = zspTable[Reg] | q;
		return Reg;
	}

	private final int M_SRL(int Reg) {
		int q = Reg & 1;
		Reg = (Reg >> 1) & 0xFF;
		R.F = zspTable[Reg] | q;
		return Reg;
	}

	private final int M_SRA(int Reg) {
		int q = Reg & 1;
		Reg = ((Reg >> 1) | (Reg & 0x80)) & 0xFF;
		R.F = zspTable[Reg] | q;
		return Reg;
	}

	private final int M_INC(int Reg) {
		Reg = (Reg + 1) & 0xFF;
		R.F = (R.F & C_FLAG) | zsTable[Reg] | ((Reg == 0x80) ? V_FLAG : 0)
				| ((Reg & 0x0F) != 0 ? 0 : H_FLAG);
		return Reg;
	}

	private final int M_DEC(int Reg) {
		R.F = (R.F & C_FLAG) | N_FLAG | ((Reg == 0x80) ? V_FLAG : 0)
				| ((Reg & 0x0F) != 0 ? 0 : H_FLAG);
		Reg = (Reg - 1) & 0xFF;
		R.F |= zsTable[Reg];
		return Reg;
	}

	private final void M_ADD(int Reg) {
		int q = R.A + Reg;
		R.F = zsTable[q & 255] | ((q & 256) >> 8) | ((R.A ^ q ^ Reg) & H_FLAG)
				| (((Reg ^ R.A ^ 0x80) & (Reg ^ q) & 0x80) >> 5);
		R.A = q & 0xFF;
	}

	private final void M_ADC(int Reg) {
		int q = R.A + Reg + (R.F & 1);
		R.F = zsTable[q & 255] | ((q & 256) >> 8) | ((R.A ^ q ^ Reg) & H_FLAG)
				| (((Reg ^ R.A ^ 0x80) & (Reg ^ q) & 0x80) >> 5);
		R.A = q & 0xFF;
	}

	private final void M_SUB(int Reg) {
		int q = R.A - Reg;
		R.F = zsTable[q & 255] | ((q & 256) >> 8) | N_FLAG
				| ((R.A ^ q ^ Reg) & H_FLAG)
				| (((Reg ^ R.A) & (Reg ^ q) & 0x80) >> 5);
		R.A = q & 0xFF;
	}

	private final void M_SBC(int Reg) {
		int q;
		q = R.A - Reg - (R.F & 1);
		R.F = zsTable[q & 255] | ((q & 256) >> 8) | N_FLAG
				| ((R.A ^ q ^ Reg) & H_FLAG)
				| (((Reg ^ R.A) & (Reg ^ q) & 0x80) >> 5);
		R.A = q & 0xFF;
	}

	private final void M_CP(int Reg) {
		int q = R.A - Reg;
		R.F = zsTable[q & 255] | ((q & 256) >> 8) | N_FLAG
				| ((R.A ^ q ^ Reg) & H_FLAG)
				| (((Reg ^ R.A) & (Reg ^ q) & 0x80) >> 5);
	}

	private final int M_ADDW(int Reg1, int Reg2) {
		int q = Reg1 + Reg2;
		R.F = (R.F & (S_FLAG | Z_FLAG | V_FLAG))
				| (((Reg1 ^ q ^ Reg2) & 0x1000) >> 8) | ((q >> 16) & 1);
		return q & 0xFFFF;
	}

	private final void M_ADCW(int Reg) {
		int q = R.HL.W + Reg + (R.F & 1);
		R.F = (((R.HL.W ^ q ^ Reg) & 0x1000) >> 8) | ((q >> 16) & 1)
				| ((q & 0x8000) >> 8) | (((q & 65535) != 0) ? 0 : Z_FLAG)
				| (((Reg ^ R.HL.W ^ 0x8000) & (Reg ^ q) & 0x8000) >> 13);
		R.HL.SetW(q & 0xFFFF);
	}

	private final void M_SBCW(int Reg) {
		int q = R.HL.W - Reg - (R.F & 1);
		R.F = (((R.HL.W ^ q ^ Reg) & 0x1000) >> 8) | ((q >> 16) & 1)
				| ((q & 0x8000) >> 8) | (((q & 65535) != 0) ? 0 : Z_FLAG)
				| (((Reg ^ R.HL.W) & (Reg ^ q) & 0x8000) >> 13) | N_FLAG;
		R.HL.SetW(q & 0xFFFF);
	}

	private final int M_RDMEM(int A) {
		return Z80_RDMEM(A);
	}

	private final void M_WRMEM(int A, int V) {
		Z80_WRMEM(A, V);
	}

	private final char M_RDOP(int A) {
		return Z80_RDOP(A);
	}

	private final char M_RDOP_ARG(int A) {
		return Z80_RDOP_ARG(A);
	}

	private final char M_RDSTACK(int A) {
		return Z80_RDSTACK(A);
	}

	private final void M_WRSTACK(int A, int V) {
		Z80_WRSTACK(A, V);
	}

	private final void M_SKIP_CALL() {
		R.PC = (R.PC + 2) & 0xFFFF;
	}

	private final void M_SKIP_JP() {
		R.PC = (R.PC + 2) & 0xFFFF;
	}

	private final void M_SKIP_JR() {
		R.PC = (R.PC + 1) & 0xFFFF;
	}

	private final void M_SKIP_RET()	{
		
	}

	private final boolean M_C() {
		return (R.F & C_FLAG) != 0;
	}

	private final boolean M_NC() {
		return (!M_C());
	}

	private final boolean M_Z() {
		return (R.F & Z_FLAG) != 0;
	}

	private final boolean M_NZ() {
		return (!M_Z());
	}

	private final boolean M_M() {
		return (R.F & S_FLAG) != 0;
	}

	private final boolean M_P() {
		return (!M_M());
	}

	private final boolean M_PE() {
		return (R.F & V_FLAG) != 0;
	}

	private final boolean M_PO() {
		return (!M_PE());
	}

	/* Get next opcode and increment program counter */
	private char M_RDMEM_OPCODE() {
		int retval = M_RDOP_ARG(R.PC);
		R.PC = (R.PC + 1) & 0xFFFF;
		return (char) retval;
	}

	private char M_RDMEM_WORD(int A) {
		int i = M_RDMEM(A);
		i += M_RDMEM((A + 1) & 0xFFFF) << 8;
		return (char) i;
	}

	private void M_WRMEM_WORD(int A, int V) {
		M_WRMEM(A, V & 255);
		M_WRMEM((A + 1) & 0xFFFF, V >> 8);
	}

	private char M_RDMEM_OPCODE_WORD() {
		int i = M_RDMEM_OPCODE();
		i += M_RDMEM_OPCODE() << 8;
		return (char) i;
	}

	private final int M_XIX() {
		return (R.IX.W + (byte) M_RDMEM_OPCODE()) & 0xFFFF;
	}

	private final int M_XIY() {
		return (R.IY.W + (byte) M_RDMEM_OPCODE()) & 0xFFFF;
	}

	private final int M_RD_XHL() {
		return M_RDMEM(R.HL.W);
	}

	private final int M_RD_XIX() {
		int i = M_XIX();
		return M_RDMEM(i);
	}

	private final int M_RD_XIY() {
		int i = M_XIY();
		return M_RDMEM(i);
	}

	private final void M_WR_XIX(int a) {
		int i = M_XIX();
		M_WRMEM(i, a);
	}

	private final void M_WR_XIY(int a) {
		int i = M_XIY();
		M_WRMEM(i, a);
	}

	/****************************************************************************/
	/* Reset registers to their initial values */
	/****************************************************************************/
	public void reset() {
		R.AF = R.PC = R.SP = 0;
		R.A = R.F = 0;
		R.BC.SetW(0);
		R.DE.SetW(0);
		R.HL.SetW(0);
		R.IX.SetW(0);
		R.IY.SetW(0);
		R.AF2 = R.BC2 = R.DE2 = R.HL2 = 0;
		R.IFF1 = R.IFF2 = R.HALT = R.IM = R.I = R.R = R.R2 = 0;
		R.SP = 0xF000;
		R.R = 0;//rand.nextInt();
		
		clearPendingInterrupts();
	}

	/****************************************************************************/
	/* Initialise the various lookup tables used by the emulation code */
	/****************************************************************************/
	private void initTables() {
		int zs;
		int i, p;

		for (i = 0; i < 256; i++) {
			zs = 0;
			if (i == 0)
				zs |= Z_FLAG;
			if ((i & 0x80) != 0)
				zs |= S_FLAG;
			p = 0;
			if ((i & 1) != 0)
				p++;
			if ((i & 2) != 0)
				p++;
			if ((i & 4) != 0)
				p++;
			if ((i & 8) != 0)
				p++;
			if ((i & 16) != 0)
				p++;
			if ((i & 32) != 0)
				p++;
			if ((i & 64) != 0)
				p++;
			if ((i & 128) != 0)
				p++;
			pTable[i] = ((p & 1) != 0) ? 0 : V_FLAG;
			zsTable[i] = zs;
			zspTable[i] = zs | pTable[i];
		}
		for (i = 0; i < 256; i++) {
			zsTable[i + 256] = zsTable[i] | C_FLAG;
			zspTable[i + 256] = zspTable[i] | C_FLAG;
			pTable[i + 256] = pTable[i] | C_FLAG;
		}
	}

	/****************************************************************************/
	/* Issue an interrupt if necessary */
	/****************************************************************************/
	private void interrupt() {

		if (R.pending_irq == Z80_IGNORE_INT && R.pending_nmi == 0)
			return; /* NS 970904 */
		if (R.pending_nmi != 0 || R.IFF1 != 0) /* NS 970904 */
		{
			/* Z80_IRQ = Z80_IGNORE_INT; *//* NS 970904 */
			/* Clear interrupt flip-flop 1 */
			R.IFF1 = 0;
			/* Check if processor was halted */
			if (R.HALT != 0) {
				R.PC = (R.PC + 1) & 0xFFFF;// ++R.PC.W.l;
				R.HALT = 0;
			}
			/* if (j==Z80_NMI_INT) */
			if (R.pending_nmi != 0) /* NS 970904 */
			{
				R.pending_nmi = 0; /* NS 970904 */
				M_PUSH(R.PC);
				R.PC = 0x0066;
			} else {
				int j;

				j = R.pending_irq; /* NS 970904 */
				R.pending_irq = Z80_IGNORE_INT; /* NS 970904 */

				/* Interrupt mode 2. Call [R.I:databyte] */
				if (R.IM == 2) {
					M_PUSH(R.PC);
					R.PC = M_RDMEM_WORD((j & 255) | (R.I << 8));
				} else
				/* Interrupt mode 1. RST 38h */
				if (R.IM == 1) {
					iCount -= cycles_main[0xFF];
					opcode_main[0xFF].handler();
				} else
				/*
				 * Interrupt mode 0. We check for CALL and JP instructions, if
				 * neither of these were found we assume a 1 byte opcode was placed on
				 * the databus */
				{
					switch (j & 0xFF0000) {
					case 0xCD0000: /* bugfix NS 970904 */
						M_PUSH(R.PC);
					case 0xC30000: /* bugfix NS 970904 */
						R.PC = j & 0xFFFF;
						break;
					default:
						j &= 255;
						iCount -= cycles_main[j];
						opcode_main[j].handler();
						break;
					}
				}
			}
		}
	}

	/****************************************************************************/
	/* Set all registers to given values */
	/****************************************************************************/
	public void setRegs(Z80Regs regs) {
		R.AF = regs.AF;
		R.PC = regs.PC;
		R.SP = regs.SP;
		R.A = regs.A;
		R.F = regs.F;
		R.BC.SetW(regs.BC.W);
		R.DE.SetW(regs.DE.W);
		R.HL.SetW(regs.HL.W);
		R.IX.SetW(regs.IX.W);
		R.IY.SetW(regs.IY.W);
		R.AF2 = regs.AF2;
		R.BC2 = regs.BC2;
		R.DE2 = regs.DE2;
		R.HL2 = regs.HL2;
		R.IFF1 = regs.IFF1;
		R.IFF2 = regs.IFF2;
		R.HALT = regs.HALT;
		R.IM = regs.IM;
		R.I = regs.I;
		R.R = regs.R;
		R.R2 = regs.R2;
		R.pending_irq = regs.pending_irq;
		R.pending_nmi = regs.pending_nmi;
	}

	/****************************************************************************/
	/* Get all registers in given buffer */
	/****************************************************************************/
	public Z80Regs getRegs() {
		Z80Regs Regs = new Z80Regs();
		Regs.AF = R.AF;
		Regs.PC = R.PC;
		Regs.SP = R.SP;
		Regs.A = R.A;
		Regs.F = R.F;
		Regs.BC.SetW(R.BC.W);
		Regs.DE.SetW(R.DE.W);
		Regs.HL.SetW(R.HL.W);
		Regs.IX.SetW(R.IX.W);
		Regs.IY.SetW(R.IY.W);
		Regs.AF2 = R.AF2;
		Regs.BC2 = R.BC2;
		Regs.DE2 = R.DE2;
		Regs.HL2 = R.HL2;
		Regs.IFF1 = R.IFF1;
		Regs.IFF2 = R.IFF2;
		Regs.HALT = R.HALT;
		Regs.IM = R.IM;
		Regs.I = R.I;
		Regs.R = R.R;
		Regs.R2 = R.R2;
		Regs.pending_irq = R.pending_irq;
		Regs.pending_nmi = R.pending_nmi;
		return Regs;
	}

	/****************************************************************************/
	/* Return program counter */
	/****************************************************************************/
	public int getPC() {
		return R.PC;
	}

	public void causeInterrupt(int type) {
			R.pending_irq = 0;
	}

	public void clearPendingInterrupts() {
		R.pending_irq = Z80_IGNORE_INT;
		R.pending_nmi = 0;
	}

	/****************************************************************************/
	/* Execute IPeriod T-States. Return 0 if emulation should be stopped */
	/****************************************************************************/
	public void registerDump() {
		System.out
				.printf("AF:%04X HL:%04X DE:%04X BC:%04X PC:%04X SP:%04X IX:%04X IY:%04X\n",
						R.AF, R.HL.W, R.DE.W, R.BC.W, R.PC, R.SP, R.IX.W,
						R.IY.W);

	}

	public int execute(int cycles) {
		iCount = cycles; /* NS 970904 */
		do {
			if (R.pending_nmi != 0 || R.pending_irq != Z80_IGNORE_INT)
				interrupt(); /* NS 970901 */
			R.R++;
			int i = M_RDOP(R.PC);
			R.PC = (R.PC + 1) & 0xFFFF;
			iCount -= cycles_main[i];
			opcode_main[i].handler();
		} while (iCount > 0);
		return cycles - iCount; /* NS 970904 */
	}
	 

	public static abstract interface OpcodeFn {
		public abstract void handler();
	}

	// OP-CODES
	// -------------------------------------------------------------------------------

	private final OpcodeFn adc_a_xhl = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XHL();
			M_ADC(i);
		}
	};
	private final OpcodeFn adc_a_xix = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIX();
			M_ADC(i);
		}
	};
	@SuppressWarnings("unused")
	private final OpcodeFn adc_a_xiy = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIY();
			M_ADC(i);
		}
	};
	private final OpcodeFn adc_a_a = new OpcodeFn() {
		public void handler() {
			M_ADC(R.A);
		}
	};
	private final OpcodeFn adc_a_b = new OpcodeFn() {
		public void handler() {
			M_ADC(R.BC.H);
		}
	};
	private final OpcodeFn adc_a_c = new OpcodeFn() {
		public void handler() {
			M_ADC(R.BC.L);
		}
	};
	private final OpcodeFn adc_a_d = new OpcodeFn() {
		public void handler() {
			M_ADC(R.DE.H);
		}
	};
	private final OpcodeFn adc_a_e = new OpcodeFn() {
		public void handler() {
			M_ADC(R.DE.L);
		}
	};
	private final OpcodeFn adc_a_h = new OpcodeFn() {
		public void handler() {
			M_ADC(R.HL.H);
		}
	};
	private final OpcodeFn adc_a_l = new OpcodeFn() {
		public void handler() {
			M_ADC(R.HL.L);
		}
	};
	private final OpcodeFn adc_a_byte = new OpcodeFn() {
		public void handler() {
			int i = M_RDMEM_OPCODE();
			M_ADC(i);
		}
	};

	private final OpcodeFn adc_hl_bc = new OpcodeFn() {
		public void handler() {
			M_ADCW(R.BC.W);
		}
	};
	private final OpcodeFn adc_hl_de = new OpcodeFn() {
		public void handler() {
			M_ADCW(R.DE.W);
		}
	};
	private final OpcodeFn adc_hl_hl = new OpcodeFn() {
		public void handler() {
			M_ADCW(R.HL.W);
		}
	};
	@SuppressWarnings("unused")
	private final OpcodeFn adc_hl_sp = new OpcodeFn() {
		public void handler() {
			M_ADCW(R.SP);
		}
	};

	private final OpcodeFn add_a_xhl = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XHL();
			M_ADD(i);
		}
	};
	private final OpcodeFn add_a_xix = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIX();
			M_ADD(i);
		}
	};
	private final OpcodeFn add_a_xiy = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIY();
			M_ADD(i);
		}
	};
	private final OpcodeFn add_a_a = new OpcodeFn() {
		public void handler() {
			M_ADD(R.A);
		}
	};
	private final OpcodeFn add_a_b = new OpcodeFn() {
		public void handler() {
			M_ADD(R.BC.H);
		}
	};
	private final OpcodeFn add_a_c = new OpcodeFn() {
		public void handler() {
			M_ADD(R.BC.L);
		}
	};
	private final OpcodeFn add_a_d = new OpcodeFn() {
		public void handler() {
			M_ADD(R.DE.H);
		}
	};
	private final OpcodeFn add_a_e = new OpcodeFn() {
		public void handler() {
			M_ADD(R.DE.L);
		}
	};
	private final OpcodeFn add_a_h = new OpcodeFn() {
		public void handler() {
			M_ADD(R.HL.H);
		}
	};
	private final OpcodeFn add_a_l = new OpcodeFn() {
		public void handler() {
			M_ADD(R.HL.L);
		}
	};
	private final OpcodeFn add_a_ixh = new OpcodeFn() {
		public void handler() {
			M_ADD(R.IX.H);
		}
	};
	private final OpcodeFn add_a_ixl = new OpcodeFn() {
		public void handler() {
			M_ADD(R.IX.L);
		}
	};
	private final OpcodeFn add_a_iyh = new OpcodeFn() {
		public void handler() {
			M_ADD(R.IY.H);
		}
	};
	@SuppressWarnings("unused")
	private final OpcodeFn add_a_iyl = new OpcodeFn() {
		public void handler() {
			M_ADD(R.IY.L);
		}
	};
	private final OpcodeFn add_a_byte = new OpcodeFn() {
		public void handler() {
			int i = M_RDMEM_OPCODE();
			M_ADD(i);
		}
	};

	private final OpcodeFn add_hl_bc = new OpcodeFn() {
		public void handler() {
			R.HL.SetW(M_ADDW(R.HL.W, R.BC.W));
		}
	};
	private final OpcodeFn add_hl_de = new OpcodeFn() {
		public void handler() {
			R.HL.SetW(M_ADDW(R.HL.W, R.DE.W));
		}
	};
	private final OpcodeFn add_hl_hl = new OpcodeFn() {
		public void handler() {
			R.HL.SetW(M_ADDW(R.HL.W, R.HL.W));
		}
	};
	private final OpcodeFn add_hl_sp = new OpcodeFn() {
		public void handler() {
			R.HL.SetW(M_ADDW(R.HL.W, R.SP));
		}
	};
	private final OpcodeFn add_ix_bc = new OpcodeFn() {
		public void handler() {
			R.IX.SetW(M_ADDW(R.IX.W, R.BC.W));
		}
	};
	private final OpcodeFn add_ix_de = new OpcodeFn() {
		public void handler() {
			R.IX.SetW(M_ADDW(R.IX.W, R.DE.W));
		}
	};
	private final OpcodeFn add_ix_ix = new OpcodeFn() {
		public void handler() {
			R.IX.SetW(M_ADDW(R.IX.W, R.IX.W));
		}
	};
	private final OpcodeFn add_ix_sp = new OpcodeFn() {
		public void handler() {
			R.IX.SetW(M_ADDW(R.IX.W, R.SP));
		}
	};
	private final OpcodeFn add_iy_bc = new OpcodeFn() {
		public void handler() {
			R.IY.SetW(M_ADDW(R.IY.W, R.BC.W));
		}
	};
	private final OpcodeFn add_iy_de = new OpcodeFn() {
		public void handler() {
			R.IY.SetW(M_ADDW(R.IY.W, R.DE.W));
		}
	};
	@SuppressWarnings("unused")
	private final OpcodeFn add_iy_iy = new OpcodeFn() {
		public void handler() {
			R.IY.SetW(M_ADDW(R.IY.W, R.IY.W));
		}
	};
	private final OpcodeFn add_iy_sp = new OpcodeFn() {
		public void handler() {
			R.IY.SetW(M_ADDW(R.IY.W, R.SP));
		}
	};

	private final OpcodeFn and_xhl = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XHL();
			M_AND(i);
		}
	};
	private final OpcodeFn and_xix = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIX();
			M_AND(i);
		}
	};
	private final OpcodeFn and_xiy = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIY();
			M_AND(i);
		}
	};
	private final OpcodeFn and_a = new OpcodeFn() {
		public void handler() {
			R.F = zspTable[R.A] | H_FLAG;
		}
	};
	private final OpcodeFn and_b = new OpcodeFn() {
		public void handler() {
			M_AND(R.BC.H);
		}
	};
	private final OpcodeFn and_c = new OpcodeFn() {
		public void handler() {
			M_AND(R.BC.L);
		}
	};
	private final OpcodeFn and_d = new OpcodeFn() {
		public void handler() {
			M_AND(R.DE.H);
		}
	};
	private final OpcodeFn and_e = new OpcodeFn() {
		public void handler() {
			M_AND(R.DE.L);
		}
	};
	private final OpcodeFn and_h = new OpcodeFn() {
		public void handler() {
			M_AND(R.HL.H);
		}
	};
	private final OpcodeFn and_l = new OpcodeFn() {
		public void handler() {
			M_AND(R.HL.L);
		}
	};
	private final OpcodeFn and_byte = new OpcodeFn() {
		public void handler() {
			int i = M_RDMEM_OPCODE();
			M_AND(i);
		}
	};

	private final OpcodeFn bit_0_xhl = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XHL();
			M_BIT(0, i);
		}
	};
	private final OpcodeFn bit_0_xix = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIX();
			M_BIT(0, i);
		}
	};
	private final OpcodeFn bit_0_xiy = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIY();
			M_BIT(0, i);
		}
	};
	private final OpcodeFn bit_0_a = new OpcodeFn() {
		public void handler() {
			M_BIT(0, R.A);
		}
	};
	private final OpcodeFn bit_0_b = new OpcodeFn() {
		public void handler() {
			M_BIT(0, R.BC.H);
		}
	};
	private final OpcodeFn bit_0_c = new OpcodeFn() {
		public void handler() {
			M_BIT(0, R.BC.L);
		}
	};
	private final OpcodeFn bit_0_d = new OpcodeFn() {
		public void handler() {
			M_BIT(0, R.DE.H);
		}
	};
	private final OpcodeFn bit_0_e = new OpcodeFn() {
		public void handler() {
			M_BIT(0, R.DE.L);
		}
	};
	private final OpcodeFn bit_0_h = new OpcodeFn() {
		public void handler() {
			M_BIT(0, R.HL.H);
		}
	};
	private final OpcodeFn bit_0_l = new OpcodeFn() {
		public void handler() {
			M_BIT(0, R.HL.L);
		}
	};

	private final OpcodeFn bit_1_xhl = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XHL();
			M_BIT(1, i);
		}
	};
	private final OpcodeFn bit_1_xix = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIX();
			M_BIT(1, i);
		}
	};
	private final OpcodeFn bit_1_xiy = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIY();
			M_BIT(1, i);
		}
	};
	private final OpcodeFn bit_1_a = new OpcodeFn() {
		public void handler() {
			M_BIT(1, R.A);
		}
	};
	private final OpcodeFn bit_1_b = new OpcodeFn() {
		public void handler() {
			M_BIT(1, R.BC.H);
		}
	};
	private final OpcodeFn bit_1_c = new OpcodeFn() {
		public void handler() {
			M_BIT(1, R.BC.L);
		}
	};
	private final OpcodeFn bit_1_d = new OpcodeFn() {
		public void handler() {
			M_BIT(1, R.DE.H);
		}
	};
	private final OpcodeFn bit_1_e = new OpcodeFn() {
		public void handler() {
			M_BIT(1, R.DE.L);
		}
	};
	private final OpcodeFn bit_1_h = new OpcodeFn() {
		public void handler() {
			M_BIT(1, R.HL.H);
		}
	};
	private final OpcodeFn bit_1_l = new OpcodeFn() {
		public void handler() {
			M_BIT(1, R.HL.L);
		}
	};

	private final OpcodeFn bit_2_xhl = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XHL();
			M_BIT(2, i);
		}
	};
	private final OpcodeFn bit_2_xix = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIX();
			M_BIT(2, i);
		}
	};
	private final OpcodeFn bit_2_xiy = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIY();
			M_BIT(2, i);
		}
	};
	private final OpcodeFn bit_2_a = new OpcodeFn() {
		public void handler() {
			M_BIT(2, R.A);
		}
	};
	private final OpcodeFn bit_2_b = new OpcodeFn() {
		public void handler() {
			M_BIT(2, R.BC.H);
		}
	};
	private final OpcodeFn bit_2_c = new OpcodeFn() {
		public void handler() {
			M_BIT(2, R.BC.L);
		}
	};
	private final OpcodeFn bit_2_d = new OpcodeFn() {
		public void handler() {
			M_BIT(2, R.DE.H);
		}
	};
	private final OpcodeFn bit_2_e = new OpcodeFn() {
		public void handler() {
			M_BIT(2, R.DE.L);
		}
	};
	private final OpcodeFn bit_2_h = new OpcodeFn() {
		public void handler() {
			M_BIT(2, R.HL.H);
		}
	};
	private final OpcodeFn bit_2_l = new OpcodeFn() {
		public void handler() {
			M_BIT(2, R.HL.L);
		}
	};

	private final OpcodeFn bit_3_xhl = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XHL();
			M_BIT(3, i);
		}
	};
	private final OpcodeFn bit_3_xix = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIX();
			M_BIT(3, i);
		}
	};
	private final OpcodeFn bit_3_xiy = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIY();
			M_BIT(3, i);
		}
	};
	private final OpcodeFn bit_3_a = new OpcodeFn() {
		public void handler() {
			M_BIT(3, R.A);
		}
	};
	private final OpcodeFn bit_3_b = new OpcodeFn() {
		public void handler() {
			M_BIT(3, R.BC.H);
		}
	};
	private final OpcodeFn bit_3_c = new OpcodeFn() {
		public void handler() {
			M_BIT(3, R.BC.L);
		}
	};
	private final OpcodeFn bit_3_d = new OpcodeFn() {
		public void handler() {
			M_BIT(3, R.DE.H);
		}
	};
	private final OpcodeFn bit_3_e = new OpcodeFn() {
		public void handler() {
			M_BIT(3, R.DE.L);
		}
	};
	private final OpcodeFn bit_3_h = new OpcodeFn() {
		public void handler() {
			M_BIT(3, R.HL.H);
		}
	};
	private final OpcodeFn bit_3_l = new OpcodeFn() {
		public void handler() {
			M_BIT(3, R.HL.L);
		}
	};

	private final OpcodeFn bit_4_xhl = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XHL();
			M_BIT(4, i);
		}
	};
	private final OpcodeFn bit_4_xix = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIX();
			M_BIT(4, i);
		}
	};
	private final OpcodeFn bit_4_xiy = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIY();
			M_BIT(4, i);
		}
	};
	private final OpcodeFn bit_4_a = new OpcodeFn() {
		public void handler() {
			M_BIT(4, R.A);
		}
	};
	private final OpcodeFn bit_4_b = new OpcodeFn() {
		public void handler() {
			M_BIT(4, R.BC.H);
		}
	};
	private final OpcodeFn bit_4_c = new OpcodeFn() {
		public void handler() {
			M_BIT(4, R.BC.L);
		}
	};
	private final OpcodeFn bit_4_d = new OpcodeFn() {
		public void handler() {
			M_BIT(4, R.DE.H);
		}
	};
	private final OpcodeFn bit_4_e = new OpcodeFn() {
		public void handler() {
			M_BIT(4, R.DE.L);
		}
	};
	private final OpcodeFn bit_4_h = new OpcodeFn() {
		public void handler() {
			M_BIT(4, R.HL.H);
		}
	};
	private final OpcodeFn bit_4_l = new OpcodeFn() {
		public void handler() {
			M_BIT(4, R.HL.L);
		}
	};

	private final OpcodeFn bit_5_xhl = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XHL();
			M_BIT(5, i);
		}
	};
	private final OpcodeFn bit_5_xix = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIX();
			M_BIT(5, i);
		}
	};
	private final OpcodeFn bit_5_xiy = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIY();
			M_BIT(5, i);
		}
	};
	private final OpcodeFn bit_5_a = new OpcodeFn() {
		public void handler() {
			M_BIT(5, R.A);
		}
	};
	private final OpcodeFn bit_5_b = new OpcodeFn() {
		public void handler() {
			M_BIT(5, R.BC.H);
		}
	};
	private final OpcodeFn bit_5_c = new OpcodeFn() {
		public void handler() {
			M_BIT(5, R.BC.L);
		}
	};
	private final OpcodeFn bit_5_d = new OpcodeFn() {
		public void handler() {
			M_BIT(5, R.DE.H);
		}
	};
	private final OpcodeFn bit_5_e = new OpcodeFn() {
		public void handler() {
			M_BIT(5, R.DE.L);
		}
	};
	private final OpcodeFn bit_5_h = new OpcodeFn() {
		public void handler() {
			M_BIT(5, R.HL.H);
		}
	};
	private final OpcodeFn bit_5_l = new OpcodeFn() {
		public void handler() {
			M_BIT(5, R.HL.L);
		}
	};

	private final OpcodeFn bit_6_xhl = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XHL();
			M_BIT(6, i);
		}
	};
	private final OpcodeFn bit_6_xix = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIX();
			M_BIT(6, i);
		}
	};
	private final OpcodeFn bit_6_xiy = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIY();
			M_BIT(6, i);
		}
	};
	private final OpcodeFn bit_6_a = new OpcodeFn() {
		public void handler() {
			M_BIT(6, R.A);
		}
	};
	private final OpcodeFn bit_6_b = new OpcodeFn() {
		public void handler() {
			M_BIT(6, R.BC.H);
		}
	};
	private final OpcodeFn bit_6_c = new OpcodeFn() {
		public void handler() {
			M_BIT(6, R.BC.L);
		}
	};
	private final OpcodeFn bit_6_d = new OpcodeFn() {
		public void handler() {
			M_BIT(6, R.DE.H);
		}
	};
	private final OpcodeFn bit_6_e = new OpcodeFn() {
		public void handler() {
			M_BIT(6, R.DE.L);
		}
	};
	private final OpcodeFn bit_6_h = new OpcodeFn() {
		public void handler() {
			M_BIT(6, R.HL.H);
		}
	};
	private final OpcodeFn bit_6_l = new OpcodeFn() {
		public void handler() {
			M_BIT(6, R.HL.L);
		}
	};

	private final OpcodeFn bit_7_xhl = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XHL();
			M_BIT(7, i);
		}
	};
	private final OpcodeFn bit_7_xix = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIX();
			M_BIT(7, i);
		}
	};
	private final OpcodeFn bit_7_xiy = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIY();
			M_BIT(7, i);
		}
	};
	private final OpcodeFn bit_7_a = new OpcodeFn() {
		public void handler() {
			M_BIT(7, R.A);
		}
	};
	private final OpcodeFn bit_7_b = new OpcodeFn() {
		public void handler() {
			M_BIT(7, R.BC.H);
		}
	};
	private final OpcodeFn bit_7_c = new OpcodeFn() {
		public void handler() {
			M_BIT(7, R.BC.L);
		}
	};
	private final OpcodeFn bit_7_d = new OpcodeFn() {
		public void handler() {
			M_BIT(7, R.DE.H);
		}
	};
	private final OpcodeFn bit_7_e = new OpcodeFn() {
		public void handler() {
			M_BIT(7, R.DE.L);
		}
	};
	private final OpcodeFn bit_7_h = new OpcodeFn() {
		public void handler() {
			M_BIT(7, R.HL.H);
		}
	};
	private final OpcodeFn bit_7_l = new OpcodeFn() {
		public void handler() {
			M_BIT(7, R.HL.L);
		}
	};

	private final OpcodeFn call_c = new OpcodeFn() {
		public void handler() {
			if (M_C()) {
				M_CALL();
			} else {
				M_SKIP_CALL();
			}
		}
	};
	private final OpcodeFn call_m = new OpcodeFn() {
		public void handler() {
			if (M_M()) {
				M_CALL();
			} else {
				M_SKIP_CALL();
			}
		}
	};
	private final OpcodeFn call_nc = new OpcodeFn() {
		public void handler() {
			if (M_NC()) {
				M_CALL();
			} else {
				M_SKIP_CALL();
			}
		}
	};
	private final OpcodeFn call_nz = new OpcodeFn() {
		public void handler() {
			if (M_NZ()) {
				M_CALL();
			} else {
				M_SKIP_CALL();
			}
		}
	};
	private final OpcodeFn call_p = new OpcodeFn() {
		public void handler() {
			if (M_P()) {
				M_CALL();
			} else {
				M_SKIP_CALL();
			}
		}
	};
	private final OpcodeFn call_z = new OpcodeFn() {
		public void handler() {
			if (M_Z()) {
				M_CALL();
			} else {
				M_SKIP_CALL();
			}
		}
	};
	private final OpcodeFn call = new OpcodeFn() {
		public void handler() {
			M_CALL();
		}
	};

	private final OpcodeFn ccf = new OpcodeFn() {
		public void handler() {
			R.F = ((R.F & 0xED) | ((R.F & 1) << 4)) ^ 1;
		}
	};

	private final OpcodeFn cp_xhl = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XHL();
			M_CP(i);
		}
	};
	private final OpcodeFn cp_xix = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIX();
			M_CP(i);
		}
	};
	private final OpcodeFn cp_xiy = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIY();
			M_CP(i);
		}
	};
	private final OpcodeFn cp_a = new OpcodeFn() {
		public void handler() {
			M_CP(R.A);
		}
	};
	private final OpcodeFn cp_b = new OpcodeFn() {
		public void handler() {
			M_CP(R.BC.H);
		}
	};
	private final OpcodeFn cp_c = new OpcodeFn() {
		public void handler() {
			M_CP(R.BC.L);
		}
	};
	private final OpcodeFn cp_d = new OpcodeFn() {
		public void handler() {
			M_CP(R.DE.H);
		}
	};
	private final OpcodeFn cp_e = new OpcodeFn() {
		public void handler() {
			M_CP(R.DE.L);
		}
	};
	private final OpcodeFn cp_h = new OpcodeFn() {
		public void handler() {
			M_CP(R.HL.H);
		}
	};
	private final OpcodeFn cp_l = new OpcodeFn() {
		public void handler() {
			M_CP(R.HL.L);
		}
	};
	private final OpcodeFn cp_byte = new OpcodeFn() {
		public void handler() {
			int i = M_RDMEM_OPCODE();
			M_CP(i);
		}
	};

	private final OpcodeFn cpdr = new OpcodeFn() {
		public void handler() {
			int i, j;
			R.R -= 2;
			do {
				R.R += 2;
				i = M_RDMEM(R.HL.W);
				j = (R.A - i) & 0xFF;
				R.HL.AddW(-1);
				R.BC.AddW(-1);
				iCount -= 21;
			} while (R.BC.W != 0 && j != 0 && iCount > 0);
			R.F = (R.F & C_FLAG) | zsTable[j] | ((R.A ^ i ^ j) & H_FLAG)
					| (R.BC.W != 0 ? V_FLAG : 0) | N_FLAG;
			if (R.BC.W != 0 && j != 0)
				R.PC = (R.PC - 2) & 0xFFFF;
			else
				iCount += 5;
		}
	};

	private final OpcodeFn cpi = new OpcodeFn() {
		public void handler() {
			int i, j;
			i = M_RDMEM(R.HL.W);
			j = (R.A - i) & 0xFF;
			R.HL.AddW(1);
			R.BC.AddW(-1);
			R.F = (R.F & C_FLAG) | zsTable[j] | ((R.A ^ i ^ j) & H_FLAG)
					| (R.BC.W != 0 ? V_FLAG : 0) | N_FLAG;
		}
	};

	private final OpcodeFn cpir = new OpcodeFn() {
		public void handler() {
			int i, j;
			R.R -= 2;
			do {
				R.R += 2;
				i = M_RDMEM(R.HL.W);
				j = (R.A - i) & 0xFF;
				R.HL.AddW(1);
				R.BC.AddW(-1);
				iCount -= 21;
			} while (R.BC.W != 0 && j != 0 && iCount > 0);
			R.F = (R.F & C_FLAG) | zsTable[j] | ((R.A ^ i ^ j) & H_FLAG)
					| (R.BC.W != 0 ? V_FLAG : 0) | N_FLAG;
			if (R.BC.W != 0 && j != 0)
				R.PC = (R.PC - 2) & 0xFFFF;
			else
				iCount += 5;
		}
	};

	private final OpcodeFn cpl = new OpcodeFn() {
		public void handler() {
			R.A ^= 0xFF;
			R.F |= (H_FLAG | N_FLAG);
		}
	};

	private final OpcodeFn daa = new OpcodeFn() {
		public void handler() {
			int i;
			i = R.A;
			if ((R.F & C_FLAG) != 0)
				i |= 256;
			if ((R.F & H_FLAG) != 0)
				i |= 512;
			if ((R.F & N_FLAG) != 0)
				i |= 1024;
			R.A = ((char) DAATable[i]) >> 8;
			R.F = ((char) DAATable[i]) & 0xFF;
		}
	};

	private final OpcodeFn dec_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_DEC(i);
			M_WRMEM(R.HL.W, i);
		}
	};
	private final OpcodeFn dec_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_DEC(i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn dec_xiy = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIY();
			i = M_RDMEM(j);
			i = M_DEC(i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn dec_a = new OpcodeFn() {
		public void handler() {
			R.A = M_DEC(R.A);
		}
	};
	private final OpcodeFn dec_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_DEC(R.BC.H));
		}
	};
	private final OpcodeFn dec_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_DEC(R.BC.L));
		}
	};
	private final OpcodeFn dec_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_DEC(R.DE.H));
		}
	};
	private final OpcodeFn dec_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_DEC(R.DE.L));
		}
	};
	private final OpcodeFn dec_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_DEC(R.HL.H));
		}
	};
	private final OpcodeFn dec_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_DEC(R.HL.L));
		}
	};
	private final OpcodeFn dec_ixl = new OpcodeFn() {
		public void handler() {
			R.IX.SetL(M_DEC(R.IX.L));
		}
	};
	private final OpcodeFn dec_iyh = new OpcodeFn() {
		public void handler() {
			R.IY.SetH(M_DEC(R.IY.H));
		}
	};
	private final OpcodeFn dec_iyl = new OpcodeFn() {
		public void handler() {
			R.IY.SetL(M_DEC(R.IY.L));
		}
	};

	private final OpcodeFn dec_bc = new OpcodeFn() {
		public void handler() {
			R.BC.AddW(-1);
		}
	};
	private final OpcodeFn dec_de = new OpcodeFn() {
		public void handler() {
			R.DE.AddW(-1);
		}
	};
	private final OpcodeFn dec_hl = new OpcodeFn() {
		public void handler() {
			R.HL.AddW(-1);
		}
	};
	private final OpcodeFn dec_ix = new OpcodeFn() {
		public void handler() {
			R.IX.AddW(-1);
		}
	};
	private final OpcodeFn dec_iy = new OpcodeFn() {
		public void handler() {
			R.IY.AddW(-1);
		}
	};
	private final OpcodeFn dec_sp = new OpcodeFn() {
		public void handler() {
			R.SP = (R.SP - 1) & 0xFFFF;
		}
	};

	private final OpcodeFn di = new OpcodeFn() {
		public void handler() {
			R.IFF1 = R.IFF2 = 0;
		}
	};

	private final OpcodeFn djnz = new OpcodeFn() {
		public void handler() {
			R.BC.AddH(-1);
			if (R.BC.H != 0) {
				M_JR();
			} else {
				M_SKIP_JR();
			}
		}
	};

	private final OpcodeFn ex_xsp_hl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM_WORD(R.SP);
			M_WRMEM_WORD(R.SP, R.HL.W);
			R.HL.SetW(i);
		}
	};

	private final OpcodeFn ex_xsp_ix = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM_WORD(R.SP);
			M_WRMEM_WORD(R.SP, R.IX.W);
			R.IX.SetW(i);
		}
	};

	private final OpcodeFn ex_xsp_iy = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM_WORD(R.SP);
			M_WRMEM_WORD(R.SP, R.IY.W);
			R.IY.SetW(i);
		}
	};

	private final OpcodeFn ex_af_af = new OpcodeFn() {
		public void handler() {
			int i;
			i = (R.A << 8) | R.F;
			R.A = (R.AF2 >> 8);
			R.F = (R.AF2 & 0xFF);
			R.AF2 = i;
		}
	};

	private final OpcodeFn ex_de_hl = new OpcodeFn() {
		public void handler() {
			int i;
			i = R.DE.W;
			R.DE.SetW(R.HL.W);
			R.HL.SetW(i);
		}
	};

	private final OpcodeFn exx = new OpcodeFn() {
		public void handler() {
			int i;
			i = R.BC.W;
			R.BC.SetW(R.BC2);
			R.BC2 = i;
			i = R.DE.W;
			R.DE.SetW(R.DE2);
			R.DE2 = i;
			i = R.HL.W;
			R.HL.SetW(R.HL2);
			R.HL2 = i;
		}
	};

	private final OpcodeFn halt = new OpcodeFn() {
		public void handler() {
			R.PC = (R.PC - 1) & 0xFFFF;
			R.HALT = 1;
			if (iCount > 0)
				iCount = 0;
		}
	};

	private final OpcodeFn im_0 = new OpcodeFn() {
		public void handler() {
			R.IM = 0;
		}
	};
	private final OpcodeFn im_1 = new OpcodeFn() {
		public void handler() {
			R.IM = 1;
		}
	};
	private final OpcodeFn im_2 = new OpcodeFn() {
		public void handler() {
			R.IM = 2;
		}
	};

	private final OpcodeFn in_a_c = new OpcodeFn() {
		public void handler() {
			R.A = M_IN();
		}
	};
	private final OpcodeFn in_c_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_IN());
		}
	};
	private final OpcodeFn in_b_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_IN());
		}
	};
	private final OpcodeFn in_e_c = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_IN());
		}
	};
	private final OpcodeFn in_l_c = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_IN());
		}
	};

	private final OpcodeFn in_a_byte = new OpcodeFn() {
		public void handler() {
			int i = M_RDMEM_OPCODE();
			R.A = z80_In(i);
		}
	};

	private final OpcodeFn inc_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_INC(i);
			M_WRMEM(R.HL.W, i);
		}
	};
	private final OpcodeFn inc_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_INC(i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn inc_xiy = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIY();
			i = M_RDMEM(j);
			i = M_INC(i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn inc_a = new OpcodeFn() {
		public void handler() {
			R.A = M_INC(R.A);
		}
	};
	private final OpcodeFn inc_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_INC(R.BC.H));
		}
	};
	private final OpcodeFn inc_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_INC(R.BC.L));
		}
	};
	private final OpcodeFn inc_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_INC(R.DE.H));
		}
	};
	private final OpcodeFn inc_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_INC(R.DE.L));
		}
	};
	private final OpcodeFn inc_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_INC(R.HL.H));
		}
	};
	private final OpcodeFn inc_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_INC(R.HL.L));
		}
	};
	private final OpcodeFn inc_ixl = new OpcodeFn() {
		public void handler() {
			R.IX.SetL(M_INC(R.IX.L));
		}
	};

	private final OpcodeFn inc_bc = new OpcodeFn() {
		public void handler() {
			R.BC.AddW(1);
		}
	};
	private final OpcodeFn inc_de = new OpcodeFn() {
		public void handler() {
			R.DE.AddW(1);
		}
	};
	private final OpcodeFn inc_hl = new OpcodeFn() {
		public void handler() {
			R.HL.AddW(1);
		}
	};
	private final OpcodeFn inc_ix = new OpcodeFn() {
		public void handler() {
			R.IX.AddW(1);
		}
	};
	private final OpcodeFn inc_iy = new OpcodeFn() {
		public void handler() {
			R.IY.AddW(1);
		}
	};
	private final OpcodeFn inc_sp = new OpcodeFn() {
		public void handler() {
			R.SP = (R.SP + 1) & 0xFFFF;
		}
	};

	private final OpcodeFn jp = new OpcodeFn() {
		public void handler() {
			// M_JP();
			int i = R.PC - 1;
			M_JP();
			int j = R.PC;
			if (j == i) {
				if (iCount > 0)
					iCount = 0;/* speed up busy loop */
			} else if ((j == i - 3) && (M_RDOP(j) == 0x31)) {
				if (iCount > 10)
					iCount = 10;
			}

		}
	};
	private final OpcodeFn jp_hl = new OpcodeFn() {
		public void handler() {
			R.PC = R.HL.W;
		}
	};
	private final OpcodeFn jp_ix = new OpcodeFn() {
		public void handler() {
			R.PC = R.IX.W;
		}
	};
	private final OpcodeFn jp_iy = new OpcodeFn() {
		public void handler() {
			R.PC = R.IY.W;
		}
	};
	private final OpcodeFn jp_c = new OpcodeFn() {
		public void handler() {
			if (M_C()) {
				M_JP();
			} else {
				M_SKIP_JP();
			}
		}
	};
	private final OpcodeFn jp_m = new OpcodeFn() {
		public void handler() {
			if (M_M()) {
				M_JP();
			} else {
				M_SKIP_JP();
			}
		}
	};
	private final OpcodeFn jp_nc = new OpcodeFn() {
		public void handler() {
			if (M_NC()) {
				M_JP();
			} else {
				M_SKIP_JP();
			}
		}
	};
	private final OpcodeFn jp_nz = new OpcodeFn() {
		public void handler() {
			if (M_NZ()) {
				M_JP();
			} else {
				M_SKIP_JP();
			}
		}
	};
	private final OpcodeFn jp_p = new OpcodeFn() {
		public void handler() {
			if (M_P()) {
				M_JP();
			} else {
				M_SKIP_JP();
			}
		}
	};
	private final OpcodeFn jp_pe = new OpcodeFn() {
		public void handler() {
			if (M_PE()) {
				M_JP();
			} else {
				M_SKIP_JP();
			}
		}
	};
	private final OpcodeFn jp_po = new OpcodeFn() {
		public void handler() {
			if (M_PO()) {
				M_JP();
			} else {
				M_SKIP_JP();
			}
		}
	};
	private final OpcodeFn jp_z = new OpcodeFn() {
		public void handler() {
			if (M_Z()) {
				M_JP();
			} else {
				M_SKIP_JP();
			}
		}
	};

	private final OpcodeFn jr = new OpcodeFn() {
		public void handler() {
			// M_JR();
			int i = R.PC - 1;
			M_JR();
			int j = R.PC;
			if (j == i) {
				if (iCount > 0)
					iCount = 0;/* speed up busy loop */
			} else if ((j == i - 1) && (M_RDOP(j) == 0xfb))/* EI - 1942 */
			{
				if (iCount > 4)
					iCount = 4;
			}
		}
	};
	private final OpcodeFn jr_c = new OpcodeFn() {
		public void handler() {
			if (M_C()) {
				M_JR();
			} else {
				M_SKIP_JR();
			}
		}
	};
	private final OpcodeFn jr_nc = new OpcodeFn() {
		public void handler() {
			if (M_NC()) {
				M_JR();
			} else {
				M_SKIP_JR();
			}
		}
	};
	private final OpcodeFn jr_nz = new OpcodeFn() {
		public void handler() {
			if (M_NZ()) {
				M_JR();
			} else {
				M_SKIP_JR();
			}
		}
	};
	private final OpcodeFn jr_z = new OpcodeFn() {
		public void handler() {
			if (M_Z()) {
				M_JR();
			} else {
				M_SKIP_JR();
			}
		}
	};

	private final OpcodeFn ld_xbc_a = new OpcodeFn() {
		public void handler() {
			M_WRMEM(R.BC.W, R.A);
		}
	};
	private final OpcodeFn ld_xde_a = new OpcodeFn() {
		public void handler() {
			M_WRMEM(R.DE.W, R.A);
		}
	};
	private final OpcodeFn ld_xhl_a = new OpcodeFn() {
		public void handler() {
			M_WRMEM(R.HL.W, R.A);
		}
	};
	private final OpcodeFn ld_xhl_b = new OpcodeFn() {
		public void handler() {
			M_WRMEM(R.HL.W, R.BC.H);
		}
	};
	private final OpcodeFn ld_xhl_c = new OpcodeFn() {
		public void handler() {
			M_WRMEM(R.HL.W, R.BC.L);
		}
	};
	private final OpcodeFn ld_xhl_d = new OpcodeFn() {
		public void handler() {
			M_WRMEM(R.HL.W, R.DE.H);
		}
	};
	private final OpcodeFn ld_xhl_e = new OpcodeFn() {
		public void handler() {
			M_WRMEM(R.HL.W, R.DE.L);
		}
	};
	private final OpcodeFn ld_xhl_h = new OpcodeFn() {
		public void handler() {
			M_WRMEM(R.HL.W, R.HL.H);
		}
	};
	private final OpcodeFn ld_xhl_l = new OpcodeFn() {
		public void handler() {
			M_WRMEM(R.HL.W, R.HL.L);
		}
	};
	private final OpcodeFn ld_xhl_byte = new OpcodeFn() {
		public void handler() {
			int i = M_RDMEM_OPCODE();
			M_WRMEM(R.HL.W, i);
		}
	};
	private final OpcodeFn ld_xix_a = new OpcodeFn() {
		public void handler() {
			M_WR_XIX(R.A);
		}
	};
	private final OpcodeFn ld_xix_b = new OpcodeFn() {
		public void handler() {
			M_WR_XIX(R.BC.H);
		}
	};
	private final OpcodeFn ld_xix_c = new OpcodeFn() {
		public void handler() {
			M_WR_XIX(R.BC.L);
		}
	};
	private final OpcodeFn ld_xix_d = new OpcodeFn() {
		public void handler() {
			M_WR_XIX(R.DE.H);
		}
	};
	private final OpcodeFn ld_xix_e = new OpcodeFn() {
		public void handler() {
			M_WR_XIX(R.DE.L);
		}
	};
	private final OpcodeFn ld_xix_h = new OpcodeFn() {
		public void handler() {
			M_WR_XIX(R.HL.H);
		}
	};
	private final OpcodeFn ld_xix_l = new OpcodeFn() {
		public void handler() {
			M_WR_XIX(R.HL.L);
		}
	};
	private final OpcodeFn ld_xix_byte = new OpcodeFn() {
		public void handler() {
			int i, j;
			i = M_XIX();
			j = M_RDMEM_OPCODE();
			M_WRMEM(i, j);
		}
	};
	private final OpcodeFn ld_xiy_a = new OpcodeFn() {
		public void handler() {
			M_WR_XIY(R.A);
		}
	};
	private final OpcodeFn ld_xiy_b = new OpcodeFn() {
		public void handler() {
			M_WR_XIY(R.BC.H);
		}
	};
	private final OpcodeFn ld_xiy_c = new OpcodeFn() {
		public void handler() {
			M_WR_XIY(R.BC.L);
		}
	};
	private final OpcodeFn ld_xiy_d = new OpcodeFn() {
		public void handler() {
			M_WR_XIY(R.DE.H);
		}
	};
	private final OpcodeFn ld_xiy_e = new OpcodeFn() {
		public void handler() {
			M_WR_XIY(R.DE.L);
		}
	};
	private final OpcodeFn ld_xiy_h = new OpcodeFn() {
		public void handler() {
			M_WR_XIY(R.HL.H);
		}
	};
	private final OpcodeFn ld_xiy_l = new OpcodeFn() {
		public void handler() {
			M_WR_XIY(R.HL.L);
		}
	};
	private final OpcodeFn ld_xiy_byte = new OpcodeFn() {
		public void handler() {
			int i, j;
			i = M_XIY();
			j = M_RDMEM_OPCODE();
			M_WRMEM(i, j);
		}
	};
	private final OpcodeFn ld_xbyte_a = new OpcodeFn() {
		public void handler() {
			int i = M_RDMEM_OPCODE_WORD();
			M_WRMEM(i, R.A);
		}
	};
	private final OpcodeFn ld_xword_bc = new OpcodeFn() {
		public void handler() {
			M_WRMEM_WORD(M_RDMEM_OPCODE_WORD(), R.BC.W);
		}
	};
	private final OpcodeFn ld_xword_de = new OpcodeFn() {
		public void handler() {
			M_WRMEM_WORD(M_RDMEM_OPCODE_WORD(), R.DE.W);
		}
	};
	private final OpcodeFn ld_xword_hl = new OpcodeFn() {
		public void handler() {
			M_WRMEM_WORD(M_RDMEM_OPCODE_WORD(), R.HL.W);
		}
	};
	private final OpcodeFn ld_xword_ix = new OpcodeFn() {
		public void handler() {
			M_WRMEM_WORD(M_RDMEM_OPCODE_WORD(), R.IX.W);
		}
	};
	private final OpcodeFn ld_xword_iy = new OpcodeFn() {
		public void handler() {
			M_WRMEM_WORD(M_RDMEM_OPCODE_WORD(), R.IY.W);
		}
	};
	private final OpcodeFn ld_xword_sp = new OpcodeFn() {
		public void handler() {
			M_WRMEM_WORD(M_RDMEM_OPCODE_WORD(), R.SP);
		}
	};
	private final OpcodeFn ld_a_xbc = new OpcodeFn() {
		public void handler() {
			R.A = M_RDMEM(R.BC.W);
		}
	};
	private final OpcodeFn ld_a_xde = new OpcodeFn() {
		public void handler() {
			R.A = M_RDMEM(R.DE.W);
		}
	};
	private final OpcodeFn ld_a_xhl = new OpcodeFn() {
		public void handler() {
			R.A = M_RD_XHL();
		}
	};
	private final OpcodeFn ld_a_xix = new OpcodeFn() {
		public void handler() {
			R.A = M_RD_XIX();
		}
	};
	private final OpcodeFn ld_a_xiy = new OpcodeFn() {
		public void handler() {
			R.A = M_RD_XIY();
		}
	};
	private final OpcodeFn ld_a_xbyte = new OpcodeFn() {
		public void handler() {
			int i = M_RDMEM_OPCODE_WORD();
			R.A = M_RDMEM(i);
		}
	};

	private final OpcodeFn ld_a_byte = new OpcodeFn() {
		public void handler() {
			R.A = M_RDMEM_OPCODE();
		}
	};
	private final OpcodeFn ld_b_byte = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_RDMEM_OPCODE());
		}
	};
	private final OpcodeFn ld_c_byte = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_RDMEM_OPCODE());
		}
	};
	private final OpcodeFn ld_d_byte = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_RDMEM_OPCODE());
		}
	};
	private final OpcodeFn ld_e_byte = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_RDMEM_OPCODE());
		}
	};
	private final OpcodeFn ld_h_byte = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_RDMEM_OPCODE());
		}
	};
	private final OpcodeFn ld_l_byte = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_RDMEM_OPCODE());
		}
	};
	private final OpcodeFn ld_ixh_byte = new OpcodeFn() {
		public void handler() {
			R.IX.SetH(M_RDMEM_OPCODE());
		}
	};
	private final OpcodeFn ld_ixl_byte = new OpcodeFn() {
		public void handler() {
			R.IX.SetL(M_RDMEM_OPCODE());
		}
	};
	private final OpcodeFn ld_iyh_byte = new OpcodeFn() {
		public void handler() {
			R.IY.SetH(M_RDMEM_OPCODE());
		}
	};
	private final OpcodeFn ld_iyl_byte = new OpcodeFn() {
		public void handler() {
			R.IY.SetL(M_RDMEM_OPCODE());
		}
	};

	private final OpcodeFn ld_b_xhl = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_RD_XHL());
		}
	};
	private final OpcodeFn ld_c_xhl = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_RD_XHL());
		}
	};
	private final OpcodeFn ld_d_xhl = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_RD_XHL());
		}
	};
	private final OpcodeFn ld_e_xhl = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_RD_XHL());
		}
	};
	private final OpcodeFn ld_h_xhl = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_RD_XHL());
		}
	};
	private final OpcodeFn ld_l_xhl = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_RD_XHL());
		}
	};
	private final OpcodeFn ld_b_xix = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_RD_XIX());
		}
	};
	private final OpcodeFn ld_c_xix = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_RD_XIX());
		}
	};
	private final OpcodeFn ld_d_xix = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_RD_XIX());
		}
	};
	private final OpcodeFn ld_e_xix = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_RD_XIX());
		}
	};
	private final OpcodeFn ld_h_xix = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_RD_XIX());
		}
	};
	private final OpcodeFn ld_l_xix = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_RD_XIX());
		}
	};
	private final OpcodeFn ld_b_xiy = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_RD_XIY());
		}
	};
	private final OpcodeFn ld_c_xiy = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_RD_XIY());
		}
	};
	private final OpcodeFn ld_d_xiy = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_RD_XIY());
		}
	};
	private final OpcodeFn ld_e_xiy = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_RD_XIY());
		}
	};
	private final OpcodeFn ld_h_xiy = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_RD_XIY());
		}
	};
	private final OpcodeFn ld_l_xiy = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_RD_XIY());
		}
	};
	private final OpcodeFn ld_a_a = new OpcodeFn() {
		public void handler() {
			System.out.println("Z80: Unsupported ld_a_a instruction!");
		}
	};
	private final OpcodeFn ld_a_b = new OpcodeFn() {
		public void handler() {
			R.A = R.BC.H;
		}
	};
	private final OpcodeFn ld_a_c = new OpcodeFn() {
		public void handler() {
			R.A = R.BC.L;
		}
	};
	private final OpcodeFn ld_a_d = new OpcodeFn() {
		public void handler() {
			R.A = R.DE.H;
		}
	};
	private final OpcodeFn ld_a_e = new OpcodeFn() {
		public void handler() {
			R.A = R.DE.L;
		}
	};
	private final OpcodeFn ld_a_h = new OpcodeFn() {
		public void handler() {
			R.A = R.HL.H;
		}
	};
	private final OpcodeFn ld_a_l = new OpcodeFn() {
		public void handler() {
			R.A = R.HL.L;
		}
	};
	private final OpcodeFn ld_a_ixh = new OpcodeFn() {
		public void handler() {
			R.A = R.IX.H;
		}
	};
	private final OpcodeFn ld_a_ixl = new OpcodeFn() {
		public void handler() {
			R.A = R.IX.L;
		}
	};
	private final OpcodeFn ld_a_iyh = new OpcodeFn() {
		public void handler() {
			R.A = R.IY.H;
		}
	};
	private final OpcodeFn ld_a_iyl = new OpcodeFn() {
		public void handler() {
			R.A = R.IY.L;
		}
	};
	private final OpcodeFn ld_b_b = new OpcodeFn() {
		public void handler() {
//			System.out.println("Z80: Unsupported ld_b_b instruction!");
		}
	};

	private final OpcodeFn ld_b_a = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(R.A);
		}
	};
	private final OpcodeFn ld_b_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(R.BC.L);
		}
	};
	private final OpcodeFn ld_b_d = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(R.DE.H);
		}
	};
	private final OpcodeFn ld_b_e = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(R.DE.L);
		}
	};
	private final OpcodeFn ld_b_h = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(R.HL.H);
		}
	};
	private final OpcodeFn ld_b_l = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(R.HL.L);
		}
	};
	private final OpcodeFn ld_c_c = new OpcodeFn() {
		public void handler() {
			System.out.println("Z80: Unsupported ld_c_c instruction!");
		}
	};

	private final OpcodeFn ld_c_a = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(R.A);
		}
	};
	private final OpcodeFn ld_c_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(R.BC.H);
		}
	};
	private final OpcodeFn ld_c_d = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(R.DE.H);
		}
	};
	private final OpcodeFn ld_c_e = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(R.DE.L);
		}
	};
	private final OpcodeFn ld_c_h = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(R.HL.H);
		}
	};
	private final OpcodeFn ld_c_l = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(R.HL.L);
		}
	};
	private final OpcodeFn ld_c_ixh = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(R.IX.H);
		}
	};
	private final OpcodeFn ld_d_d = new OpcodeFn() {
		public void handler() {
			System.out.println("Z80: Unsupported ld_d_d instruction!");
		}
	};

	private final OpcodeFn ld_d_a = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(R.A);
		}
	};
	private final OpcodeFn ld_d_b = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(R.BC.H);
		}
	};
	private final OpcodeFn ld_d_c = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(R.BC.L);
		}
	};
	private final OpcodeFn ld_d_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(R.DE.L);
		}
	};
	private final OpcodeFn ld_d_h = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(R.HL.H);
		}
	};
	private final OpcodeFn ld_d_l = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(R.HL.L);
		}
	};
	private final OpcodeFn ld_d_iyh = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(R.IY.H);
		}
	};
	@SuppressWarnings("unused")
	private final OpcodeFn ld_d_iyl = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(R.IY.L);
		}
	};
	private final OpcodeFn ld_e_e = new OpcodeFn() {
		public void handler() {
			System.out.println("Z80: Unsupported ld_e_e instruction!");
		}
	};
	private final OpcodeFn ld_e_a = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(R.A);
		}
	};
	private final OpcodeFn ld_e_b = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(R.BC.H);
		}
	};
	private final OpcodeFn ld_e_c = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(R.BC.L);
		}
	};
	private final OpcodeFn ld_e_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(R.DE.H);
		}
	};
	private final OpcodeFn ld_e_h = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(R.HL.H);
		}
	};
	private final OpcodeFn ld_e_l = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(R.HL.L);
		}
	};
	private final OpcodeFn ld_e_ixl = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(R.IX.L);
		}
	};
	@SuppressWarnings("unused")
	private final OpcodeFn ld_e_iyh = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(R.IY.H);
		}
	};
	private final OpcodeFn ld_e_iyl = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(R.IY.L);
		}
	};
	private final OpcodeFn ld_h_h = new OpcodeFn() {
		public void handler() {
			System.out.println("Z80: Unsupported ld_h_h instruction!");
		}
	};

	private final OpcodeFn ld_h_a = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(R.A);
		}
	};
	private final OpcodeFn ld_h_b = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(R.BC.H);
		}
	};
	private final OpcodeFn ld_h_c = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(R.BC.L);
		}
	};
	private final OpcodeFn ld_h_d = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(R.DE.H);
		}
	};
	private final OpcodeFn ld_h_e = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(R.DE.L);
		}
	};
	private final OpcodeFn ld_h_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(R.HL.L);
		}
	};
	private final OpcodeFn ld_l_l = new OpcodeFn() {
		public void handler() {
			System.out.println("Z80: Unsupported ld_l_l instruction!");
		}
	};

	private final OpcodeFn ld_l_a = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(R.A);
		}
	};
	private final OpcodeFn ld_l_b = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(R.BC.H);
		}
	};
	private final OpcodeFn ld_l_c = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(R.BC.L);
		}
	};
	private final OpcodeFn ld_l_d = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(R.DE.H);
		}
	};
	private final OpcodeFn ld_l_e = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(R.DE.L);
		}
	};
	private final OpcodeFn ld_l_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(R.HL.H);
		}
	};
	private final OpcodeFn ld_ixl_a = new OpcodeFn() {
		public void handler() {
			R.IX.SetL(R.A);
		}
	};
	private final OpcodeFn ld_iyh_a = new OpcodeFn() {
		public void handler() {
			R.IY.SetH(R.A);
		}
	};
	private final OpcodeFn ld_iyl_a = new OpcodeFn() {
		public void handler() {
			R.IY.SetL(R.A);
		}
	};
	private final OpcodeFn ld_ixh_a = new OpcodeFn() {
		public void handler() {
			R.IX.SetH(R.A);
		}
	};
	private final OpcodeFn ld_ixh_b = new OpcodeFn() {
		public void handler() {
			R.IX.SetH(R.BC.H);
		}
	};
	private final OpcodeFn ld_ixh_c = new OpcodeFn() {
		public void handler() {
			R.IX.SetH(R.BC.L);
		}
	};
	private final OpcodeFn ld_ixh_d = new OpcodeFn() {
		public void handler() {
			R.IX.SetH(R.DE.H);
		}
	};
	private final OpcodeFn ld_ixh_e = new OpcodeFn() {
		public void handler() {
			R.IX.SetH(R.DE.L);
		}
	};

	private final OpcodeFn ld_bc_xword = new OpcodeFn() {
		public void handler() {
			R.BC.SetW(M_RDMEM_WORD(M_RDMEM_OPCODE_WORD()));
		}
	};
	private final OpcodeFn ld_bc_word = new OpcodeFn() {
		public void handler() {
			R.BC.SetW(M_RDMEM_OPCODE_WORD());
		}
	};
	private final OpcodeFn ld_de_xword = new OpcodeFn() {
		public void handler() {
			R.DE.SetW(M_RDMEM_WORD(M_RDMEM_OPCODE_WORD()));
		}
	};
	private final OpcodeFn ld_de_word = new OpcodeFn() {
		public void handler() {
			R.DE.SetW(M_RDMEM_OPCODE_WORD());
		}
	};
	private final OpcodeFn ld_hl_xword = new OpcodeFn() {
		public void handler() {
			R.HL.SetW(M_RDMEM_WORD(M_RDMEM_OPCODE_WORD()));
		}
	};
	private final OpcodeFn ld_hl_word = new OpcodeFn() {
		public void handler() {
			R.HL.SetW(M_RDMEM_OPCODE_WORD());
		}
	};
	private final OpcodeFn ld_ix_xword = new OpcodeFn() {
		public void handler() {
			R.IX.SetW(M_RDMEM_WORD(M_RDMEM_OPCODE_WORD()));
		}
	};
	private final OpcodeFn ld_ix_word = new OpcodeFn() {
		public void handler() {
			R.IX.SetW(M_RDMEM_OPCODE_WORD());
		}
	};
	private final OpcodeFn ld_iy_xword = new OpcodeFn() {
		public void handler() {
			R.IY.SetW(M_RDMEM_WORD(M_RDMEM_OPCODE_WORD()));
		}
	};
	private final OpcodeFn ld_iy_word = new OpcodeFn() {
		public void handler() {
			R.IY.SetW(M_RDMEM_OPCODE_WORD());
		}
	};
	private final OpcodeFn ld_sp_xword = new OpcodeFn() {
		public void handler() {
			R.SP = M_RDMEM_WORD(M_RDMEM_OPCODE_WORD());
		}
	};
	private final OpcodeFn ld_sp_word = new OpcodeFn() {
		public void handler() {
			R.SP = M_RDMEM_OPCODE_WORD();
		}
	};
	private final OpcodeFn ld_sp_hl = new OpcodeFn() {
		public void handler() {
			R.SP = R.HL.W;
		}
	};
	@SuppressWarnings("unused")
	private final OpcodeFn ld_sp_ix = new OpcodeFn() {
		public void handler() {
			R.SP = R.IX.W;
		}
	};
	private final OpcodeFn ld_sp_iy = new OpcodeFn() {
		public void handler() {
			R.SP = R.IY.W;
		}
	};
	private final OpcodeFn ld_a_i = new OpcodeFn() {
		public void handler() {
			R.A = R.I;
			R.F = (R.F & C_FLAG) | zsTable[R.I] | (R.IFF2 << 2);
		}
	};
	private final OpcodeFn ld_i_a = new OpcodeFn() {
		public void handler() {
			R.I = R.A;
		}
	};
	private final OpcodeFn ld_a_r = new OpcodeFn() {
		public void handler() {
			R.A = (R.R & 127) | (R.R2 & 128);
			R.F = (R.F & C_FLAG) | zsTable[R.A] | (R.IFF2 << 2);
		}
	};
	private final OpcodeFn ld_r_a = new OpcodeFn() {
		public void handler() {
			R.R = R.R2 = R.A;
		}
	};

	private final OpcodeFn ldd = new OpcodeFn() {
		public void handler() {
			M_WRMEM(R.DE.W, M_RDMEM(R.HL.W));
			R.DE.AddW(-1);
			R.HL.AddW(-1);
			R.BC.AddW(-1);
			R.F = (R.F & 0xE9) | (R.BC.W != 0 ? V_FLAG : 0);
		}
	};

	private final OpcodeFn lddr = new OpcodeFn() {
		public void handler() {
			R.R -= 2;
			do {
				R.R += 2;
				M_WRMEM(R.DE.W, M_RDMEM(R.HL.W));
				R.DE.AddW(-1);
				R.HL.AddW(-1);
				R.BC.AddW(-1);
				iCount -= 21;
			} while (R.BC.W != 0 && iCount > 0);
			R.F = (R.F & 0xE9) | (R.BC.W != 0 ? V_FLAG : 0);
			if (R.BC.W != 0)
				R.PC = (R.PC - 2) & 0xFFFF;
			else
				iCount += 5;

		}
	};
	private final OpcodeFn ldi = new OpcodeFn() {
		public void handler() {
			M_WRMEM(R.DE.W, M_RDMEM(R.HL.W));
			R.DE.AddW(1);
			R.HL.AddW(1);
			R.BC.AddW(-1);
			R.F = (R.F & 0xE9) | (R.BC.W != 0 ? V_FLAG : 0);
		}
	};
	private final OpcodeFn ldir = new OpcodeFn() {
		public void handler() {
			R.R -= 2;
			do {
				R.R += 2;
				M_WRMEM(R.DE.W, M_RDMEM(R.HL.W));
				R.DE.AddW(1);
				R.HL.AddW(1);
				R.BC.AddW(-1);
				iCount -= 21;
			} while (R.BC.W != 0 && iCount > 0);
			R.F = (R.F & 0xE9) | (R.BC.W != 0 ? V_FLAG : 0);
			if (R.BC.W != 0)
				R.PC = (R.PC - 2) & 0xFFFF;
			else
				iCount += 5;
		}
	};
	private final OpcodeFn neg = new OpcodeFn() {
		public void handler() {
			int i;
			i = R.A;
			R.A = 0;
			M_SUB(i);
		}
	};

	private final OpcodeFn nop = new OpcodeFn() {
		public void handler() {
		}
	};

	private final OpcodeFn or_xhl = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XHL();
			M_OR(i);
		}
	};
	private final OpcodeFn or_xix = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIX();
			M_OR(i);
		}
	};
	private final OpcodeFn or_xiy = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIY();
			M_OR(i);
		}
	};
	private final OpcodeFn or_a = new OpcodeFn() {
		public void handler() {
			R.F = zspTable[R.A];
		}
	};
	private final OpcodeFn or_b = new OpcodeFn() {
		public void handler() {
			M_OR(R.BC.H);
		}
	};
	private final OpcodeFn or_c = new OpcodeFn() {
		public void handler() {
			M_OR(R.BC.L);
		}
	};
	private final OpcodeFn or_d = new OpcodeFn() {
		public void handler() {
			M_OR(R.DE.H);
		}
	};
	private final OpcodeFn or_e = new OpcodeFn() {
		public void handler() {
			M_OR(R.DE.L);
		}
	};
	private final OpcodeFn or_h = new OpcodeFn() {
		public void handler() {
			M_OR(R.HL.H);
		}
	};
	private final OpcodeFn or_l = new OpcodeFn() {
		public void handler() {
			M_OR(R.HL.L);
		}
	};
	private final OpcodeFn or_byte = new OpcodeFn() {
		public void handler() {
			int i = M_RDMEM_OPCODE();
			M_OR(i);
		}
	};

	private final OpcodeFn outi = new OpcodeFn() {
		public void handler() {
			z80_Out(R.BC.L, M_RDMEM(R.HL.W));
			R.HL.AddW(1);
			R.BC.AddH(-1);
			R.F = (R.BC.H != 0) ? N_FLAG : (Z_FLAG | N_FLAG);
		}
	};
	private final OpcodeFn otir = new OpcodeFn() {
		public void handler() {
			R.R -= 2;
			do {
				R.R += 2;
				z80_Out(R.BC.L, M_RDMEM(R.HL.W));
				R.HL.AddW(1);
				R.BC.AddH(-1);
				iCount -= 21;
			} while (R.BC.H != 0 && iCount > 0);
			R.F = (R.BC.H != 0) ? N_FLAG : (Z_FLAG | N_FLAG);
			if (R.BC.H != 0)
				R.PC = (R.PC - 2) & 0xFFFF;
			else
				iCount += 5;
		}
	};

	private final OpcodeFn out_c_a = new OpcodeFn() {
		public void handler() {
			z80_Out(R.BC.L, R.A);
		}
	};
	private final OpcodeFn out_c_b = new OpcodeFn() {
		public void handler() {
			z80_Out(R.BC.L, R.BC.H);
		}
	};
	private final OpcodeFn out_c_d = new OpcodeFn() {
		public void handler() {
			z80_Out(R.BC.L, R.DE.H);
		}
	};
	private final OpcodeFn out_c_e = new OpcodeFn() {
		public void handler() {
			z80_Out(R.BC.L, R.DE.L);
		}
	};
	private final OpcodeFn out_c_h = new OpcodeFn() {
		public void handler() {
			z80_Out(R.BC.L, R.HL.H);
		}
	};
	private final OpcodeFn out_c_l = new OpcodeFn() {
		public void handler() {
			z80_Out(R.BC.L, R.HL.L);
		}
	};
	private final OpcodeFn out_byte_a = new OpcodeFn() {
		public void handler() {
			int i = M_RDMEM_OPCODE();
			z80_Out(i, R.A);
		}
	};

	private final OpcodeFn pop_af = new OpcodeFn() {
		public void handler() {
			R.AF = M_POP();
			R.A = R.AF >> 8;
			R.F = R.AF & 0xFF;
		}
	};
	private final OpcodeFn pop_bc = new OpcodeFn() {
		public void handler() {
			R.BC.SetW(M_POP());
		}
	};
	private final OpcodeFn pop_de = new OpcodeFn() {
		public void handler() {
			R.DE.SetW(M_POP());
		}
	};
	private final OpcodeFn pop_hl = new OpcodeFn() {
		public void handler() {
			R.HL.SetW(M_POP());
		}
	};
	private final OpcodeFn pop_ix = new OpcodeFn() {
		public void handler() {
			R.IX.SetW(M_POP());
		}
	};
	private final OpcodeFn pop_iy = new OpcodeFn() {
		public void handler() {
			R.IY.SetW(M_POP());
		}
	};

	private final OpcodeFn push_af = new OpcodeFn() {
		public void handler() {
			M_PUSH((R.A << 8) | R.F);
		}
	};
	private final OpcodeFn push_bc = new OpcodeFn() {
		public void handler() {
			M_PUSH(R.BC.W);
		}
	};
	private final OpcodeFn push_de = new OpcodeFn() {
		public void handler() {
			M_PUSH(R.DE.W);
		}
	};
	private final OpcodeFn push_hl = new OpcodeFn() {
		public void handler() {
			M_PUSH(R.HL.W);
		}
	};
	private final OpcodeFn push_ix = new OpcodeFn() {
		public void handler() {
			M_PUSH(R.IX.W);
		}
	};
	private final OpcodeFn push_iy = new OpcodeFn() {
		public void handler() {
			M_PUSH(R.IY.W);
		}
	};

	private final OpcodeFn res_0_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_RES(0, i);
			M_WRMEM(R.HL.W, i);
		}
	};
	private final OpcodeFn res_0_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_RES(0, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn res_0_xiy = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIY();
			i = M_RDMEM(j);
			i = M_RES(0, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn res_0_a = new OpcodeFn() {
		public void handler() {
			R.A = M_RES(0, R.A);
		}
	};
	private final OpcodeFn res_0_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_RES(0, R.BC.H));
		}
	};
	private final OpcodeFn res_0_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_RES(0, R.BC.L));
		}
	};
	private final OpcodeFn res_0_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_RES(0, R.DE.H));
		}
	};
	private final OpcodeFn res_0_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_RES(0, R.DE.L));
		}
	};
	private final OpcodeFn res_0_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_RES(0, R.HL.H));
		}
	};
	private final OpcodeFn res_0_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_RES(0, R.HL.L));
		}
	};

	private final OpcodeFn res_1_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_RES(1, i);
			M_WRMEM(R.HL.W, i);
		}
	};
	private final OpcodeFn res_1_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_RES(1, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn res_1_xiy = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIY();
			i = M_RDMEM(j);
			i = M_RES(1, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn res_1_a = new OpcodeFn() {
		public void handler() {
			R.A = M_RES(1, R.A);
		}
	};
	private final OpcodeFn res_1_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_RES(1, R.BC.H));
		}
	};
	private final OpcodeFn res_1_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_RES(1, R.BC.L));
		}
	};
	private final OpcodeFn res_1_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_RES(1, R.DE.H));
		}
	};
	private final OpcodeFn res_1_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_RES(1, R.DE.L));
		}
	};
	private final OpcodeFn res_1_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_RES(1, R.HL.H));
		}
	};
	private final OpcodeFn res_1_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_RES(1, R.HL.L));
		}
	};

	private final OpcodeFn res_2_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_RES(2, i);
			M_WRMEM(R.HL.W, i);
		}
	};
	private final OpcodeFn res_2_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_RES(2, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn res_2_xiy = new OpcodeFn() {
		public void handler() {
			int j = M_XIY();
			int i = M_RDMEM(j);
			i = M_RES(2, i);
			M_WRMEM(j, i);
		}
	};

	private final OpcodeFn res_2_a = new OpcodeFn() {
		public void handler() {
			R.A = M_RES(2, R.A);
		}
	};
	private final OpcodeFn res_2_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_RES(2, R.BC.H));
		}
	};
	private final OpcodeFn res_2_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_RES(2, R.BC.L));
		}
	};
	private final OpcodeFn res_2_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_RES(2, R.DE.H));
		}
	};
	private final OpcodeFn res_2_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_RES(2, R.DE.L));
		}
	};
	private final OpcodeFn res_2_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_RES(2, R.HL.H));
		}
	};
	private final OpcodeFn res_2_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_RES(2, R.HL.L));
		}
	};

	private final OpcodeFn res_3_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_RES(3, i);
			M_WRMEM(R.HL.W, i);
		}
	};
	private final OpcodeFn res_3_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_RES(3, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn res_3_xiy = new OpcodeFn() {
		public void handler() {
			int j = M_XIY();
			int i = M_RDMEM(j);
			i = M_RES(3, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn res_3_a = new OpcodeFn() {
		public void handler() {
			R.A = M_RES(3, R.A);
		}
	};
	private final OpcodeFn res_3_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_RES(3, R.BC.H));
		}
	};
	private final OpcodeFn res_3_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_RES(3, R.BC.L));
		}
	};
	private final OpcodeFn res_3_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_RES(3, R.DE.H));
		}
	};
	private final OpcodeFn res_3_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_RES(3, R.DE.L));
		}
	};
	private final OpcodeFn res_3_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_RES(3, R.HL.H));
		}
	};
	private final OpcodeFn res_3_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_RES(3, R.HL.L));
		}
	};

	private final OpcodeFn res_4_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_RES(4, i);
			M_WRMEM(R.HL.W, i);
		}
	};
	private final OpcodeFn res_4_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_RES(4, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn res_4_xiy = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIY();
			i = M_RDMEM(j);
			i = M_RES(4, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn res_4_a = new OpcodeFn() {
		public void handler() {
			R.A = M_RES(4, R.A);
		}
	};
	private final OpcodeFn res_4_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_RES(4, R.BC.H));
		}
	};
	private final OpcodeFn res_4_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_RES(4, R.BC.L));
		}
	};
	private final OpcodeFn res_4_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_RES(4, R.DE.H));
		}
	};
	private final OpcodeFn res_4_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_RES(4, R.DE.L));
		}
	};
	private final OpcodeFn res_4_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_RES(4, R.HL.H));
		}
	};
	private final OpcodeFn res_4_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_RES(4, R.HL.L));
		}
	};

	private final OpcodeFn res_5_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_RES(5, i);
			M_WRMEM(R.HL.W, i);
		}
	};
	private final OpcodeFn res_5_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_RES(5, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn res_5_xiy = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIY();
			i = M_RDMEM(j);
			i = M_RES(5, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn res_5_a = new OpcodeFn() {
		public void handler() {
			R.A = M_RES(5, R.A);
		}
	};
	private final OpcodeFn res_5_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_RES(5, R.BC.H));
		}
	};
	private final OpcodeFn res_5_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_RES(5, R.BC.L));
		}
	};
	private final OpcodeFn res_5_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_RES(5, R.DE.H));
		}
	};
	private final OpcodeFn res_5_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_RES(5, R.DE.L));
		}
	};
	private final OpcodeFn res_5_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_RES(5, R.HL.H));
		}
	};
	private final OpcodeFn res_5_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_RES(5, R.HL.L));
		}
	};

	private final OpcodeFn res_6_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_RES(6, i);
			M_WRMEM(R.HL.W, i);
		}
	};
	private final OpcodeFn res_6_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_RES(6, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn res_6_xiy = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIY();
			i = M_RDMEM(j);
			i = M_RES(6, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn res_6_a = new OpcodeFn() {
		public void handler() {
			R.A = M_RES(6, R.A);
		}
	};
	private final OpcodeFn res_6_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_RES(6, R.BC.H));
		}
	};
	private final OpcodeFn res_6_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_RES(6, R.BC.L));
		}
	};
	private final OpcodeFn res_6_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_RES(6, R.DE.H));
		}
	};
	private final OpcodeFn res_6_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_RES(6, R.DE.L));
		}
	};
	private final OpcodeFn res_6_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_RES(6, R.HL.H));
		}
	};
	private final OpcodeFn res_6_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_RES(6, R.HL.L));
		}
	};

	private final OpcodeFn res_7_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_RES(7, i);
			M_WRMEM(R.HL.W, i);
		}
	};
	private final OpcodeFn res_7_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_RES(7, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn res_7_xiy = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIY();
			i = M_RDMEM(j);
			i = M_RES(7, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn res_7_a = new OpcodeFn() {
		public void handler() {
			R.A = M_RES(7, R.A);
		}
	};
	private final OpcodeFn res_7_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_RES(7, R.BC.H));
		}
	};
	private final OpcodeFn res_7_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_RES(7, R.BC.L));
		}
	};
	private final OpcodeFn res_7_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_RES(7, R.DE.H));
		}
	};
	private final OpcodeFn res_7_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_RES(7, R.DE.L));
		}
	};
	private final OpcodeFn res_7_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_RES(7, R.HL.H));
		}
	};
	private final OpcodeFn res_7_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_RES(7, R.HL.L));
		}
	};

	private final OpcodeFn ret = new OpcodeFn() {
		public void handler() {
			M_RET();
		}
	};
	private final OpcodeFn ret_c = new OpcodeFn() {
		public void handler() {
			if (M_C()) {
				M_RET();
			} else {
				M_SKIP_RET();
			}
		}
	};
	private final OpcodeFn ret_m = new OpcodeFn() {
		public void handler() {
			if (M_M()) {
				M_RET();
			} else {
				M_SKIP_RET();
			}
		}
	};
	private final OpcodeFn ret_nc = new OpcodeFn() {
		public void handler() {
			if (M_NC()) {
				M_RET();
			} else {
				M_SKIP_RET();
			}
		}
	};
	private final OpcodeFn ret_nz = new OpcodeFn() {
		public void handler() {
			if (M_NZ()) {
				M_RET();
			} else {
				M_SKIP_RET();
			}
		}
	};
	private final OpcodeFn ret_p = new OpcodeFn() {
		public void handler() {
			if (M_P()) {
				M_RET();
			} else {
				M_SKIP_RET();
			}
		}
	};
	private final OpcodeFn ret_pe = new OpcodeFn() {
		public void handler() {
			if (M_PE()) {
				M_RET();
			} else {
				M_SKIP_RET();
			}
		}
	};
	private final OpcodeFn ret_po = new OpcodeFn() {
		public void handler() {
			if (M_PO()) {
				M_RET();
			} else {
				M_SKIP_RET();
			}
		}
	};
	private final OpcodeFn ret_z = new OpcodeFn() {
		public void handler() {
			if (M_Z()) {
				M_RET();
			} else {
				M_SKIP_RET();
			}
		}
	};

	private final OpcodeFn reti = new OpcodeFn() {
		public void handler() { /* Z80_Reti(); */
			M_RET();
		}
	};
	private final OpcodeFn retn = new OpcodeFn() {
		public void handler() {
			R.IFF1 = R.IFF2; /* Z80_Retn(); */
			M_RET();
		}
	};

	private final OpcodeFn rl_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_RL(i);
			M_WRMEM(R.HL.W, i);
		}
	};
	private final OpcodeFn rl_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_RL(i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn rl_xiy = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIY();
			i = M_RDMEM(j);
			i = M_RL(i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn rl_a = new OpcodeFn() {
		public void handler() {
			R.A = M_RL(R.A);
		}
	};
	private final OpcodeFn rl_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_RL(R.BC.H));
		}
	};
	private final OpcodeFn rl_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_RL(R.BC.L));
		}
	};
	private final OpcodeFn rl_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_RL(R.DE.H));
		}
	};
	private final OpcodeFn rl_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_RL(R.DE.L));
		}
	};
	private final OpcodeFn rl_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_RL(R.HL.H));
		}
	};
	private final OpcodeFn rl_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_RL(R.HL.L));
		}
	};
	private final OpcodeFn rla = new OpcodeFn() {
		public void handler() {
			M_RLA();
		}
	};

	private final OpcodeFn rlc_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_RLC(i);
			M_WRMEM(R.HL.W, i);
		}
	};
	private final OpcodeFn rlc_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_RLC(i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn rlc_a = new OpcodeFn() {
		public void handler() {
			R.A = M_RLC(R.A);
		}
	};
	private final OpcodeFn rlc_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_RLC(R.BC.H));
		}
	};
	private final OpcodeFn rlc_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_RLC(R.BC.L));
		}
	};
	private final OpcodeFn rlc_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_RLC(R.DE.H));
		}
	};
	private final OpcodeFn rlc_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_RLC(R.DE.L));
		}
	};
	private final OpcodeFn rlc_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_RLC(R.HL.H));
		}
	};
	private final OpcodeFn rlc_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_RLC(R.HL.L));
		}
	};
	private final OpcodeFn rlca = new OpcodeFn() {
		public void handler() {
			M_RLCA();
		}
	};

	private final OpcodeFn rld = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			M_WRMEM(R.HL.W, ((i << 4) | (R.A & 0x0F)) & 0xFF);
			R.A = ((R.A & 0xF0) | (i >> 4)) & 0xFF;
			R.F = (R.F & C_FLAG) | zspTable[R.A];
		}
	};

	private final OpcodeFn rr_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_RR(i);
			M_WRMEM(R.HL.W, i);
		}
	};
	private final OpcodeFn rr_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_RR(i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn rr_a = new OpcodeFn() {
		public void handler() {
			R.A = M_RR(R.A);
		}
	};
	private final OpcodeFn rr_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_RR(R.BC.H));
		}
	};
	private final OpcodeFn rr_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_RR(R.BC.L));
		}
	};
	private final OpcodeFn rr_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_RR(R.DE.H));
		}
	};
	private final OpcodeFn rr_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_RR(R.DE.L));
		}
	};
	private final OpcodeFn rr_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_RR(R.HL.H));
		}
	};
	private final OpcodeFn rr_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_RR(R.HL.L));
		}
	};
	private final OpcodeFn rra = new OpcodeFn() {
		public void handler() {
			M_RRA();
		}
	};

	private final OpcodeFn rrc_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_RRC(i);
			M_WRMEM(R.HL.W, i);
		}
	};
	private final OpcodeFn rrc_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_RRC(i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn rrc_a = new OpcodeFn() {
		public void handler() {
			R.A = M_RRC(R.A);
		}
	};
	private final OpcodeFn rrc_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_RRC(R.BC.H));
		}
	};
	private final OpcodeFn rrc_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_RRC(R.BC.L));
		}
	};
	private final OpcodeFn rrc_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_RRC(R.DE.H));
		}
	};
	private final OpcodeFn rrc_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_RRC(R.DE.L));
		}
	};
	private final OpcodeFn rrc_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_RRC(R.HL.H));
		}
	};
	private final OpcodeFn rrc_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_RRC(R.HL.L));
		}
	};
	private final OpcodeFn rrca = new OpcodeFn() {
		public void handler() {
			M_RRCA();
		}
	};
	private final OpcodeFn rrd = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			M_WRMEM(R.HL.W, ((i >> 4) | (R.A << 4)) & 0xFF);
			R.A = ((R.A & 0xF0) | (i & 0x0F)) & 0xFF;
			R.F = (R.F & C_FLAG) | zspTable[R.A];
		}
	};
	private final OpcodeFn rst_00 = new OpcodeFn() {
		public void handler() {
			M_RST(0x00);
		}
	};
	private final OpcodeFn rst_08 = new OpcodeFn() {
		public void handler() {
			M_RST(0x08);
		}
	};
	private final OpcodeFn rst_10 = new OpcodeFn() {
		public void handler() {
			M_RST(0x10);
		}
	};
	private final OpcodeFn rst_18 = new OpcodeFn() {
		public void handler() {
			M_RST(0x18);
		}
	};
	private final OpcodeFn rst_20 = new OpcodeFn() {
		public void handler() {
			M_RST(0x20);
		}
	};
	private final OpcodeFn rst_28 = new OpcodeFn() {
		public void handler() {
			M_RST(0x28);
		}
	};
	private final OpcodeFn rst_30 = new OpcodeFn() {
		public void handler() {
			M_RST(0x30);
		}
	};
	private final OpcodeFn rst_38 = new OpcodeFn() {
		public void handler() {
			M_RST(0x38);
		}
	};
	private final OpcodeFn sbc_a_byte = new OpcodeFn() {
		public void handler() {
			int i = M_RDMEM_OPCODE();
			M_SBC(i);
		}
	};
	private final OpcodeFn sbc_a_xhl = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XHL();
			M_SBC(i);
		}
	};
	private final OpcodeFn sbc_a_xix = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIX();
			M_SBC(i);
		}
	};
	@SuppressWarnings("unused")
	private final OpcodeFn sbc_a_xiy = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIY();
			M_SBC(i);
		}
	};
	private final OpcodeFn sbc_a_a = new OpcodeFn() {
		public void handler() {
			M_SBC(R.A);
		}
	};
	private final OpcodeFn sbc_a_b = new OpcodeFn() {
		public void handler() {
			M_SBC(R.BC.H);
		}
	};
	private final OpcodeFn sbc_a_c = new OpcodeFn() {
		public void handler() {
			M_SBC(R.BC.L);
		}
	};
	private final OpcodeFn sbc_a_d = new OpcodeFn() {
		public void handler() {
			M_SBC(R.DE.H);
		}
	};
	private final OpcodeFn sbc_a_e = new OpcodeFn() {
		public void handler() {
			M_SBC(R.DE.L);
		}
	};
	private final OpcodeFn sbc_a_h = new OpcodeFn() {
		public void handler() {
			M_SBC(R.HL.H);
		}
	};
	private final OpcodeFn sbc_a_l = new OpcodeFn() {
		public void handler() {
			M_SBC(R.HL.L);
		}
	};

	private final OpcodeFn sbc_hl_bc = new OpcodeFn() {
		public void handler() {
			M_SBCW(R.BC.W);
		}
	};
	private final OpcodeFn sbc_hl_de = new OpcodeFn() {
		public void handler() {
			M_SBCW(R.DE.W);
		}
	};
	@SuppressWarnings("unused")
	private final OpcodeFn sbc_hl_hl = new OpcodeFn() {
		public void handler() {
			M_SBCW(R.HL.W);
		}
	};
	@SuppressWarnings("unused")
	private final OpcodeFn sbc_hl_sp = new OpcodeFn() {
		public void handler() {
			M_SBCW(R.SP);
		}
	};

	private final OpcodeFn scf = new OpcodeFn() {
		public void handler() {
			R.F = (R.F & 0xEC) | C_FLAG;
		}
	};

	private final OpcodeFn set_0_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_SET(0, i);
			M_WRMEM(R.HL.W, i);
		}
	};
	private final OpcodeFn set_0_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_SET(0, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn set_0_xiy = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIY();
			i = M_RDMEM(j);
			i = M_SET(0, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn set_0_a = new OpcodeFn() {
		public void handler() {
			R.A = M_SET(0, R.A);
		}
	};
	private final OpcodeFn set_0_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_SET(0, R.BC.H));
		}
	};
	private final OpcodeFn set_0_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_SET(0, R.BC.L));
		}
	};
	private final OpcodeFn set_0_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_SET(0, R.DE.H));
		}
	};
	private final OpcodeFn set_0_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_SET(0, R.DE.L));
		}
	};
	private final OpcodeFn set_0_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_SET(0, R.HL.H));
		}
	};
	private final OpcodeFn set_0_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_SET(0, R.HL.L));
		}
	};

	private final OpcodeFn set_1_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_SET(1, i);
			M_WRMEM(R.HL.W, i);
		}
	};
	private final OpcodeFn set_1_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_SET(1, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn set_1_xiy = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIY();
			i = M_RDMEM(j);
			i = M_SET(1, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn set_1_a = new OpcodeFn() {
		public void handler() {
			R.A = M_SET(1, R.A);
		}
	};
	private final OpcodeFn set_1_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_SET(1, R.BC.H));
		}
	};
	private final OpcodeFn set_1_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_SET(1, R.BC.L));
		}
	};
	private final OpcodeFn set_1_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_SET(1, R.DE.H));
		}
	};
	private final OpcodeFn set_1_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_SET(1, R.DE.L));
		}
	};
	private final OpcodeFn set_1_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_SET(1, R.HL.H));
		}
	};
	private final OpcodeFn set_1_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_SET(1, R.HL.L));
		}
	};

	private final OpcodeFn set_2_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_SET(2, i);
			M_WRMEM(R.HL.W, i);
		}
	};
	private final OpcodeFn set_2_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_SET(2, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn set_2_xiy = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIY();
			i = M_RDMEM(j);
			i = M_SET(2, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn set_2_a = new OpcodeFn() {
		public void handler() {
			R.A = M_SET(2, R.A);
		}
	};
	private final OpcodeFn set_2_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_SET(2, R.BC.H));
		}
	};
	private final OpcodeFn set_2_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_SET(2, R.BC.L));
		}
	};
	private final OpcodeFn set_2_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_SET(2, R.DE.H));
		}
	};
	private final OpcodeFn set_2_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_SET(2, R.DE.L));
		}
	};
	private final OpcodeFn set_2_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_SET(2, R.HL.H));
		}
	};
	private final OpcodeFn set_2_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_SET(2, R.HL.L));
		}
	};

	private final OpcodeFn set_3_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_SET(3, i);
			M_WRMEM(R.HL.W, i);
		}
	};
	private final OpcodeFn set_3_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_SET(3, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn set_3_xiy = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIY();
			i = M_RDMEM(j);
			i = M_SET(3, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn set_3_a = new OpcodeFn() {
		public void handler() {
			R.A = M_SET(3, R.A);
		}
	};
	private final OpcodeFn set_3_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_SET(3, R.BC.H));
		}
	};
	private final OpcodeFn set_3_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_SET(3, R.BC.L));
		}
	};
	private final OpcodeFn set_3_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_SET(3, R.DE.H));
		}
	};
	private final OpcodeFn set_3_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_SET(3, R.DE.L));
		}
	};
	private final OpcodeFn set_3_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_SET(3, R.HL.H));
		}
	};
	private final OpcodeFn set_3_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_SET(3, R.HL.L));
		}
	};

	private final OpcodeFn set_4_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_SET(4, i);
			M_WRMEM(R.HL.W, i);
		}
	};
	private final OpcodeFn set_4_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_SET(4, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn set_4_xiy = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIY();
			i = M_RDMEM(j);
			i = M_SET(4, i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn set_4_a = new OpcodeFn() {
		public void handler() {
			R.A = M_SET(4, R.A);
		}
	};
	
	private final OpcodeFn set_4_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_SET(4, R.BC.H));
		}
	};
	
	private final OpcodeFn set_4_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_SET(4, R.BC.L));
		}
	};
	
	private final OpcodeFn set_4_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_SET(4, R.DE.H));
		}
	};
	
	private final OpcodeFn set_4_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_SET(4, R.DE.L));
		}
	};
	
	private final OpcodeFn set_4_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_SET(4, R.HL.H));
		}
	};
	
	private final OpcodeFn set_4_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_SET(4, R.HL.L));
		}
	};

	private final OpcodeFn set_5_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_SET(5, i);
			M_WRMEM(R.HL.W, i);
		}
	};
	
	private final OpcodeFn set_5_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_SET(5, i);
			M_WRMEM(j, i);
		}
	};
	
	private final OpcodeFn set_5_xiy = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIY();
			i = M_RDMEM(j);
			i = M_SET(5, i);
			M_WRMEM(j, i);
		}
	};
	
	private final OpcodeFn set_5_a = new OpcodeFn() {
		public void handler() {
			R.A = M_SET(5, R.A);
		}
	};
	
	private final OpcodeFn set_5_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_SET(5, R.BC.H));
		}
	};
	
	private final OpcodeFn set_5_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_SET(5, R.BC.L));
		}
	};
	
	private final OpcodeFn set_5_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_SET(5, R.DE.H));
		}
	};
	
	private final OpcodeFn set_5_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_SET(5, R.DE.L));
		}
	};
	
	private final OpcodeFn set_5_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_SET(5, R.HL.H));
		}
	};
	
	private final OpcodeFn set_5_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_SET(5, R.HL.L));
		}
	};

	private final OpcodeFn set_6_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_SET(6, i);
			M_WRMEM(R.HL.W, i);
		}
	};
	
	private final OpcodeFn set_6_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_SET(6, i);
			M_WRMEM(j, i);
		}
	};
	
	private final OpcodeFn set_6_xiy = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIY();
			i = M_RDMEM(j);
			i = M_SET(6, i);
			M_WRMEM(j, i);
		}
	};
	
	private final OpcodeFn set_6_a = new OpcodeFn() {
		public void handler() {
			R.A = M_SET(6, R.A);
		}
	};
	
	private final OpcodeFn set_6_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_SET(6, R.BC.H));
		}
	};
	
	private final OpcodeFn set_6_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_SET(6, R.BC.L));
		}
	};
	
	private final OpcodeFn set_6_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_SET(6, R.DE.H));
		}
	};
	
	private final OpcodeFn set_6_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_SET(6, R.DE.L));
		}
	};
	
	private final OpcodeFn set_6_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_SET(6, R.HL.H));
		}
	};
	
	private final OpcodeFn set_6_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_SET(6, R.HL.L));
		}
	};

	private final OpcodeFn set_7_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_SET(7, i);
			M_WRMEM(R.HL.W, i);
		}
	};
	
	private final OpcodeFn set_7_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_SET(7, i);
			M_WRMEM(j, i);
		}
	};
	
	private final OpcodeFn set_7_xiy = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIY();
			i = M_RDMEM(j);
			i = M_SET(7, i);
			M_WRMEM(j, i);
		}
	};
	
	private final OpcodeFn set_7_a = new OpcodeFn() {
		public void handler() {
			R.A = M_SET(7, R.A);
		}
	};
	
	private final OpcodeFn set_7_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_SET(7, R.BC.H));
		}
	};
	
	private final OpcodeFn set_7_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_SET(7, R.BC.L));
		}
	};
	
	private final OpcodeFn set_7_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_SET(7, R.DE.H));
		}
	};
	
	private final OpcodeFn set_7_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_SET(7, R.DE.L));
		}
	};
	
	private final OpcodeFn set_7_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_SET(7, R.HL.H));
		}
	};
	
	private final OpcodeFn set_7_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_SET(7, R.HL.L));
		}
	};

	private final OpcodeFn sla_xhl = new OpcodeFn() {
		public void handler() {
			int i;
			i = M_RDMEM(R.HL.W);
			i = M_SLA(i);
			M_WRMEM(R.HL.W, i);
		}
	};
	
	private final OpcodeFn sla_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_SLA(i);
			M_WRMEM(j, i);
		}
	};
	
	private final OpcodeFn sla_xiy = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIY();
			i = M_RDMEM(j);
			i = M_SLA(i);
			M_WRMEM(j, i);
		}
	};

	private final OpcodeFn sla_a = new OpcodeFn() {
		public void handler() {
			R.A = M_SLA(R.A);
		}
	};
	
	private final OpcodeFn sla_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_SLA(R.BC.H));
		}
	};
	
	private final OpcodeFn sla_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_SLA(R.BC.L));
		}
	};
	
	private final OpcodeFn sla_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_SLA(R.DE.H));
		}
	};
	
	private final OpcodeFn sla_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_SLA(R.DE.L));
		}
	};
	
	private final OpcodeFn sla_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_SLA(R.HL.H));
		}
	};
	
	private final OpcodeFn sla_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_SLA(R.HL.L));
		}
	};

	private final OpcodeFn sra_a = new OpcodeFn() {
		public void handler() {
			R.A = M_SRA(R.A);
		}
	};
	private final OpcodeFn sra_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_SRA(R.BC.H));
		}
	};
	private final OpcodeFn sra_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_SRA(R.BC.L));
		}
	};
	private final OpcodeFn sra_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_SRA(R.DE.H));
		}
	};
	private final OpcodeFn sra_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_SRA(R.DE.L));
		}
	};
	private final OpcodeFn sra_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_SRA(R.HL.H));
		}
	};
	private final OpcodeFn sra_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_SRA(R.HL.L));
		}
	};

	private final OpcodeFn srl_xix = new OpcodeFn() {
		public void handler() {
			int i;
			int j;
			j = M_XIX();
			i = M_RDMEM(j);
			i = M_SRL(i);
			M_WRMEM(j, i);
		}
	};
	private final OpcodeFn srl_a = new OpcodeFn() {
		public void handler() {
			R.A = M_SRL(R.A);
		}
	};
	private final OpcodeFn srl_b = new OpcodeFn() {
		public void handler() {
			R.BC.SetH(M_SRL(R.BC.H));
		}
	};
	private final OpcodeFn srl_c = new OpcodeFn() {
		public void handler() {
			R.BC.SetL(M_SRL(R.BC.L));
		}
	};
	private final OpcodeFn srl_d = new OpcodeFn() {
		public void handler() {
			R.DE.SetH(M_SRL(R.DE.H));
		}
	};
	private final OpcodeFn srl_e = new OpcodeFn() {
		public void handler() {
			R.DE.SetL(M_SRL(R.DE.L));
		}
	};
	private final OpcodeFn srl_h = new OpcodeFn() {
		public void handler() {
			R.HL.SetH(M_SRL(R.HL.H));
		}
	};
	private final OpcodeFn srl_l = new OpcodeFn() {
		public void handler() {
			R.HL.SetL(M_SRL(R.HL.L));
		}
	};

	private final OpcodeFn sub_xhl = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XHL();
			M_SUB(i);
		}
	};
	private final OpcodeFn sub_xix = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIX();
			M_SUB(i);
		}
	};
	private final OpcodeFn sub_xiy = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIY();
			M_SUB(i);
		}
	};
	private final OpcodeFn sub_a = new OpcodeFn() {
		public void handler() {
			R.A = 0;
			R.F = Z_FLAG | N_FLAG;
		}
	};
	private final OpcodeFn sub_b = new OpcodeFn() {
		public void handler() {
			M_SUB(R.BC.H);
		}
	};
	private final OpcodeFn sub_c = new OpcodeFn() {
		public void handler() {
			M_SUB(R.BC.L);
		}
	};
	private final OpcodeFn sub_d = new OpcodeFn() {
		public void handler() {
			M_SUB(R.DE.H);
		}
	};
	private final OpcodeFn sub_e = new OpcodeFn() {
		public void handler() {
			M_SUB(R.DE.L);
		}
	};
	private final OpcodeFn sub_h = new OpcodeFn() {
		public void handler() {
			M_SUB(R.HL.H);
		}
	};
	private final OpcodeFn sub_l = new OpcodeFn() {
		public void handler() {
			M_SUB(R.HL.L);
		}
	};
	private final OpcodeFn sub_ixh = new OpcodeFn() {
		public void handler() {
			M_SUB(R.IX.H);
		}
	};
	private final OpcodeFn sub_ixl = new OpcodeFn() {
		public void handler() {
			M_SUB(R.IX.L);
		}
	};
	private final OpcodeFn sub_byte = new OpcodeFn() {
		public void handler() {
			int i = M_RDMEM_OPCODE();
			M_SUB(i);
		}
	};

	private final OpcodeFn xor_xhl = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XHL();
			M_XOR(i);
		}
	};
	private final OpcodeFn xor_xix = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIX();
			M_XOR(i);
		}
	};
	private final OpcodeFn xor_xiy = new OpcodeFn() {
		public void handler() {
			int i = M_RD_XIY();
			M_XOR(i);
		}
	};
	private final OpcodeFn xor_a = new OpcodeFn() {
		public void handler() {
			R.A = 0;
			R.F = Z_FLAG | V_FLAG;
		}
	};
	private final OpcodeFn xor_b = new OpcodeFn() {
		public void handler() {
			M_XOR(R.BC.H);
		}
	};
	private final OpcodeFn xor_c = new OpcodeFn() {
		public void handler() {
			M_XOR(R.BC.L);
		}
	};
	private final OpcodeFn xor_d = new OpcodeFn() {
		public void handler() {
			M_XOR(R.DE.H);
		}
	};
	private final OpcodeFn xor_e = new OpcodeFn() {
		public void handler() {
			M_XOR(R.DE.L);
		}
	};
	private final OpcodeFn xor_h = new OpcodeFn() {
		public void handler() {
			M_XOR(R.HL.H);
		}
	};
	private final OpcodeFn xor_l = new OpcodeFn() {
		public void handler() {
			M_XOR(R.HL.L);
		}
	};
	private final OpcodeFn xor_byte = new OpcodeFn() {
		public void handler() {
			int i = M_RDMEM_OPCODE();
			M_XOR(i);
		}
	};
	private final OpcodeFn xor_ixh = new OpcodeFn() {
		public void handler() {
			M_XOR(R.IX.H);
		}
	};
	private final OpcodeFn no_op = new OpcodeFn() {
		public void handler() {
			R.PC = (R.PC - 1) & 0xFFFF;
		}
	};

	private final OpcodeFn no_op_xx = new OpcodeFn() {
		public void handler() {
			R.PC = (R.PC + 1) & 0xFFFF;
		}
	};
	private final OpcodeFn[] opcode_dd_cb = { no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, rlc_xix, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx, rrc_xix,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, rl_xix, no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, rr_xix, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, sla_xix, no_op_xx, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, srl_xix, no_op_xx, bit_0_xix, bit_0_xix, bit_0_xix,
			bit_0_xix, bit_0_xix, bit_0_xix, bit_0_xix, bit_0_xix, bit_1_xix,
			bit_1_xix, bit_1_xix, bit_1_xix, bit_1_xix, bit_1_xix, bit_1_xix,
			bit_1_xix, bit_2_xix, bit_2_xix, bit_2_xix, bit_2_xix, bit_2_xix,
			bit_2_xix, bit_2_xix, bit_2_xix, bit_3_xix, bit_3_xix, bit_3_xix,
			bit_3_xix, bit_3_xix, bit_3_xix, bit_3_xix, bit_3_xix, bit_4_xix,
			bit_4_xix, bit_4_xix, bit_4_xix, bit_4_xix, bit_4_xix, bit_4_xix,
			bit_4_xix, bit_5_xix, bit_5_xix, bit_5_xix, bit_5_xix, bit_5_xix,
			bit_5_xix, bit_5_xix, bit_5_xix, bit_6_xix, bit_6_xix, bit_6_xix,
			bit_6_xix, bit_6_xix, bit_6_xix, bit_6_xix, bit_6_xix, bit_7_xix,
			bit_7_xix, bit_7_xix, bit_7_xix, bit_7_xix, bit_7_xix, bit_7_xix,
			bit_7_xix, no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, res_0_xix, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, res_1_xix, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx, res_2_xix,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, res_3_xix, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, res_4_xix, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx, res_5_xix,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, res_6_xix, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, res_7_xix, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx, set_0_xix,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, set_1_xix, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, set_2_xix, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx, set_3_xix,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, set_4_xix, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, set_5_xix, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx, set_6_xix,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, set_7_xix, no_op_xx };

	private final OpcodeFn[] opcode_fd_cb = { null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx, rl_xiy,
			no_op_xx, null, null, null, null, null, null, null, null, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx, sla_xiy,
			no_op_xx, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, bit_0_xiy, bit_0_xiy, bit_0_xiy, bit_0_xiy,
			bit_0_xiy, bit_0_xiy, bit_0_xiy, bit_0_xiy, bit_1_xiy, bit_1_xiy,
			bit_1_xiy, bit_1_xiy, bit_1_xiy, bit_1_xiy, bit_1_xiy, bit_1_xiy,
			bit_2_xiy, bit_2_xiy, bit_2_xiy, bit_2_xiy, bit_2_xiy, bit_2_xiy,
			bit_2_xiy, bit_2_xiy, bit_3_xiy, bit_3_xiy, bit_3_xiy, bit_3_xiy,
			bit_3_xiy, bit_3_xiy, bit_3_xiy, bit_3_xiy, bit_4_xiy, bit_4_xiy,
			bit_4_xiy, bit_4_xiy, bit_4_xiy, bit_4_xiy, bit_4_xiy, bit_4_xiy,
			bit_5_xiy, bit_5_xiy, bit_5_xiy, bit_5_xiy, bit_5_xiy, bit_5_xiy,
			bit_5_xiy, bit_5_xiy, bit_6_xiy, bit_6_xiy, bit_6_xiy, bit_6_xiy,
			bit_6_xiy, bit_6_xiy, bit_6_xiy, bit_6_xiy, bit_7_xiy, bit_7_xiy,
			bit_7_xiy, bit_7_xiy, bit_7_xiy, bit_7_xiy, bit_7_xiy, bit_7_xiy,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			res_0_xiy, no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, res_1_xiy, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, res_2_xiy, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			res_3_xiy, no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, res_4_xiy, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, res_5_xiy, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			res_6_xiy, no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, res_7_xiy, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, set_0_xiy, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			set_1_xiy, no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, set_2_xiy, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, set_3_xiy, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			set_4_xiy, no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, set_5_xiy, no_op_xx, no_op_xx, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, set_6_xiy, no_op_xx,
			no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx, no_op_xx,
			set_7_xiy, no_op_xx };

	private final OpcodeFn dd_cb = new OpcodeFn() {
		public void handler() {
			int opcode = M_RDOP_ARG((R.PC + 1) & 0xFFFF);
			iCount -= cycles_xx_cb[opcode];
			opcode_dd_cb[opcode].handler();
			R.PC = (R.PC + 1) & 0xFFFF;
		}
	};
	private final OpcodeFn fd_cb = new OpcodeFn() {
		public void handler() {

			int opcode = M_RDOP_ARG((R.PC + 1) & 0xFFFF);
			iCount -= cycles_xx_cb[opcode];
			opcode_fd_cb[opcode].handler();
			R.PC = (R.PC + 1) & 0xFFFF;
		}
	};

	private final OpcodeFn[] opcode_cb = { rlc_b, rlc_c, rlc_d, rlc_e, rlc_h, rlc_l,
			rlc_xhl, rlc_a, rrc_b, rrc_c, rrc_d, rrc_e, rrc_h, rrc_l, rrc_xhl,
			rrc_a, rl_b, rl_c, rl_d, rl_e, rl_h, rl_l, rl_xhl, rl_a, rr_b,
			rr_c, rr_d, rr_e, rr_h, rr_l, rr_xhl, rr_a, sla_b, sla_c, sla_d,
			sla_e, sla_h, sla_l, sla_xhl, sla_a, sra_b, sra_c, sra_d, sra_e,
			sra_h, sra_l, null, sra_a, null, null, null, null, null, null,
			null, null, srl_b, srl_c, srl_d, srl_e, srl_h, srl_l, null, srl_a,
			bit_0_b, bit_0_c, bit_0_d, bit_0_e, bit_0_h, bit_0_l, bit_0_xhl,
			bit_0_a, bit_1_b, bit_1_c, bit_1_d, bit_1_e, bit_1_h, bit_1_l,
			bit_1_xhl, bit_1_a, bit_2_b, bit_2_c, bit_2_d, bit_2_e, bit_2_h,
			bit_2_l, bit_2_xhl, bit_2_a, bit_3_b, bit_3_c, bit_3_d, bit_3_e,
			bit_3_h, bit_3_l, bit_3_xhl, bit_3_a, bit_4_b, bit_4_c, bit_4_d,
			bit_4_e, bit_4_h, bit_4_l, bit_4_xhl, bit_4_a, bit_5_b, bit_5_c,
			bit_5_d, bit_5_e, bit_5_h, bit_5_l, bit_5_xhl, bit_5_a, bit_6_b,
			bit_6_c, bit_6_d, bit_6_e, bit_6_h, bit_6_l, bit_6_xhl, bit_6_a,
			bit_7_b, bit_7_c, bit_7_d, bit_7_e, bit_7_h, bit_7_l, bit_7_xhl,
			bit_7_a, res_0_b, res_0_c, res_0_d, res_0_e, res_0_h, res_0_l,
			res_0_xhl, res_0_a, res_1_b, res_1_c, res_1_d, res_1_e, res_1_h,
			res_1_l, res_1_xhl, res_1_a, res_2_b, res_2_c, res_2_d, res_2_e,
			res_2_h, res_2_l, res_2_xhl, res_2_a, res_3_b, res_3_c, res_3_d,
			res_3_e, res_3_h, res_3_l, res_3_xhl, res_3_a, res_4_b, res_4_c,
			res_4_d, res_4_e, res_4_h, res_4_l, res_4_xhl, res_4_a, res_5_b,
			res_5_c, res_5_d, res_5_e, res_5_h, res_5_l, res_5_xhl, res_5_a,
			res_6_b, res_6_c, res_6_d, res_6_e, res_6_h, res_6_l, res_6_xhl,
			res_6_a, res_7_b, res_7_c, res_7_d, res_7_e, res_7_h, res_7_l,
			res_7_xhl, res_7_a, set_0_b, set_0_c, set_0_d, set_0_e, set_0_h,
			set_0_l, set_0_xhl, set_0_a, set_1_b, set_1_c, set_1_d, set_1_e,
			set_1_h, set_1_l, set_1_xhl, set_1_a, set_2_b, set_2_c, set_2_d,
			set_2_e, set_2_h, set_2_l, set_2_xhl, set_2_a, set_3_b, set_3_c,
			set_3_d, set_3_e, set_3_h, set_3_l, set_3_xhl, set_3_a, set_4_b,
			set_4_c, set_4_d, set_4_e, set_4_h, set_4_l, set_4_xhl, set_4_a,
			set_5_b, set_5_c, set_5_d, set_5_e, set_5_h, set_5_l, set_5_xhl,
			set_5_a, set_6_b, set_6_c, set_6_d, set_6_e, set_6_h, set_6_l,
			set_6_xhl, set_6_a, set_7_b, set_7_c, set_7_d, set_7_e, set_7_h,
			set_7_l, set_7_xhl, set_7_a };

	private final OpcodeFn[] opcode_dd = { no_op, no_op, no_op, no_op, no_op, no_op,
			no_op, no_op, no_op, add_ix_bc, no_op, no_op, no_op, no_op, no_op,
			no_op, no_op, no_op, no_op, no_op, no_op, no_op, no_op, no_op,
			no_op, add_ix_de, no_op, no_op, no_op, no_op, no_op, no_op, null,
			ld_ix_word, ld_xword_ix, inc_ix, null, null, ld_ixh_byte, null,
			no_op, add_ix_ix, ld_ix_xword, dec_ix, inc_ixl, dec_ixl,
			ld_ixl_byte, no_op, no_op, no_op, no_op, no_op, inc_xix, dec_xix,
			ld_xix_byte, no_op, no_op, add_ix_sp, no_op, no_op, no_op, no_op,
			no_op, no_op, null, null, null, null, null, null, ld_b_xix, null,
			null, null, null, null, ld_c_ixh, null, ld_c_xix, null, null, null,
			null, null, null, null, ld_d_xix, null, null, null, null, null,
			null, ld_e_ixl, ld_e_xix, null, ld_ixh_b, ld_ixh_c, ld_ixh_d,
			ld_ixh_e, null, null, ld_h_xix, ld_ixh_a, null, null, null, null,
			null, null, ld_l_xix, ld_ixl_a, ld_xix_b, ld_xix_c, ld_xix_d,
			ld_xix_e, ld_xix_h, ld_xix_l, no_op, ld_xix_a, no_op, no_op, no_op,
			no_op, ld_a_ixh, ld_a_ixl, ld_a_xix, no_op, no_op, no_op, no_op,
			no_op, add_a_ixh, add_a_ixl, add_a_xix, no_op, null, null, null,
			null, null, null, adc_a_xix, null, no_op, no_op, no_op, no_op,
			sub_ixh, sub_ixl, sub_xix, no_op, null, null, null, null, null,
			null, sbc_a_xix, null, null, null, null, null, null, null, and_xix,
			null, null, null, null, null, xor_ixh, null, xor_xix, null, null,
			null, null, null, null, null, or_xix, null, null, null, null, null,
			null, null, cp_xix, null, no_op, no_op, no_op, no_op, no_op, no_op,
			no_op, no_op, no_op, no_op, no_op, dd_cb, no_op, no_op, no_op,
			no_op, no_op, no_op, no_op, no_op, no_op, no_op, no_op, no_op,
			no_op, no_op, no_op, no_op, no_op, no_op, no_op, no_op, no_op,
			pop_ix, no_op, ex_xsp_ix, no_op, push_ix, no_op, no_op, no_op,
			jp_ix, no_op, no_op, no_op, no_op, no_op, no_op, no_op, no_op,
			no_op, no_op, no_op, no_op, no_op, no_op, null, null, null, null,
			null, no_op, no_op, null };

	private final OpcodeFn[] opcode_ed = { nop, nop, nop, nop, nop, nop, nop, nop,
			nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop,
			nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop,
			nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop,
			nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop,
			nop, nop, nop, nop, in_b_c, out_c_b, sbc_hl_bc, ld_xword_bc, neg,
			retn, im_0, ld_i_a, in_c_c, null, adc_hl_bc, ld_bc_xword, neg,
			reti, im_0, ld_r_a, null, out_c_d, sbc_hl_de, ld_xword_de, neg,
			retn, im_1, ld_a_i, in_e_c, out_c_e, adc_hl_de, ld_de_xword, neg,
			reti, im_2, ld_a_r, null, out_c_h, null, null, neg, retn, im_0,
			rrd, in_l_c, out_c_l, adc_hl_hl, null, neg, reti, im_0, rld, null,
			null, null, ld_xword_sp, neg, retn, im_1, null, in_a_c, out_c_a,
			null, ld_sp_xword, neg, reti, im_2, null, nop, nop, nop, nop, nop,
			nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop,
			nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop,
			nop, ldi, cpi, null, outi, null, null, null, null, ldd, null, null,
			null, null, null, null, null, ldir, cpir, null, otir, null, null,
			null, null, lddr, cpdr, null, null, null, null, null, null, nop,
			nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop,
			nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop,
			nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop,
			nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop, nop,
			nop, nop, nop, null, null, null, null, null, null, null, null };

	private final OpcodeFn[] opcode_fd = { no_op, no_op, no_op, no_op, no_op, no_op,
			no_op, no_op, no_op, add_iy_bc, no_op, no_op, no_op, no_op, no_op,
			no_op, no_op, no_op, no_op, no_op, no_op, no_op, no_op, no_op,
			no_op, add_iy_de, no_op, no_op, no_op, no_op, no_op, no_op, null,
			ld_iy_word, ld_xword_iy, inc_iy, null, dec_iyh, ld_iyh_byte, null,
			null, null, ld_iy_xword, dec_iy, null, dec_iyl, ld_iyl_byte, null,
			no_op, no_op, no_op, no_op, inc_xiy, dec_xiy, ld_xiy_byte, no_op,
			no_op, add_iy_sp, no_op, no_op, no_op, no_op, no_op, no_op, null,
			null, null, null, null, null, ld_b_xiy, null, null, null, null,
			null, null, null, ld_c_xiy, null, null, null, null, null, ld_d_iyh,
			null, ld_d_xiy, null, null, null, no_op, null, null, ld_e_iyl,
			ld_e_xiy, null, null, null, null, null, null, null, ld_h_xiy,
			ld_iyh_a, null, null, null, null, null, null, ld_l_xiy, ld_iyl_a,
			ld_xiy_b, ld_xiy_c, ld_xiy_d, ld_xiy_e, ld_xiy_h, ld_xiy_l, no_op,
			ld_xiy_a, null, null, null, null, ld_a_iyh, ld_a_iyl, ld_a_xiy,
			null, null, null, null, null, add_a_iyh, null, add_a_xiy, null,
			null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, sub_xiy, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, and_xiy,
			null, null, null, null, null, null, null, xor_xiy, null, null,
			null, null, null, null, null, or_xiy, null, null, null, null, null,
			null, null, cp_xiy, null, no_op, no_op, no_op, no_op, no_op, no_op,
			no_op, no_op, no_op, no_op, no_op, fd_cb, no_op, no_op, no_op,
			no_op, no_op, no_op, no_op, no_op, no_op, no_op, no_op, no_op,
			no_op, no_op, no_op, no_op, no_op, no_op, no_op, no_op, no_op,
			pop_iy, no_op, ex_xsp_iy, no_op, push_iy, no_op, no_op, no_op,
			jp_iy, no_op, no_op, no_op, no_op, no_op, no_op, no_op, no_op,
			no_op, no_op, no_op, no_op, no_op, no_op, no_op, ld_sp_iy, no_op,
			no_op, no_op, no_op, no_op, no_op };

	private final OpcodeFn cb = new OpcodeFn() {
		public void handler() {
			R.R += 1;
			int opcode = M_RDOP(R.PC);
			R.PC = (R.PC + 1) & 0xFFFF;
			iCount -= cycles_cb[opcode];
			opcode_cb[opcode].handler();
		}
	};

	private final OpcodeFn dd = new OpcodeFn() {
		public void handler() {

			R.R += 1;
			int opcode = M_RDOP(R.PC);
			R.PC = (R.PC + 1) & 0xFFFF;
			iCount -= cycles_xx[opcode];
			opcode_dd[opcode].handler();
		}
	};
	private final OpcodeFn ed = new OpcodeFn() {
		public void handler() {

			R.R += 1;
			int opcode = M_RDOP(R.PC);
			R.PC = (R.PC + 1) & 0xFFFF;
			iCount -= cycles_ed[opcode];
			opcode_ed[opcode].handler();
		}
	};
	private final OpcodeFn fd = new OpcodeFn() {
		public void handler() {

			R.R += 1;
			int opcode = M_RDOP(R.PC);
			R.PC = (R.PC + 1) & 0xFFFF;
			iCount -= cycles_xx[opcode];
			opcode_fd[opcode].handler();
		}
	};
	private final OpcodeFn ei = new OpcodeFn() {
		public void handler() {
			int opcode;
			/*
			 * If interrupts were disabled, execute one more instruction and
			 * check the IRQ line. If not, simply set interrupt flip/flop 2
			 * */
			if (R.IFF1 == 0) {
				R.IFF1 = R.IFF2 = 1;
				R.R += 1;
				opcode = M_RDOP(R.PC);
				R.PC = (R.PC + 1) & 0xFFFF;
				iCount -= cycles_main[opcode];
				opcode_main[opcode].handler();
				interrupt();
			} else
				R.IFF2 = 1;
		}
	};

	private final OpcodeFn[] opcode_main = { nop, ld_bc_word, ld_xbc_a, inc_bc,
			inc_b, dec_b, ld_b_byte, rlca, ex_af_af, add_hl_bc, ld_a_xbc,
			dec_bc, inc_c, dec_c, ld_c_byte, rrca, djnz, ld_de_word, ld_xde_a,
			inc_de, inc_d, dec_d, ld_d_byte, rla, jr, add_hl_de, ld_a_xde,
			dec_de, inc_e, dec_e, ld_e_byte, rra, jr_nz, ld_hl_word,
			ld_xword_hl, inc_hl, inc_h, dec_h, ld_h_byte, daa, jr_z, add_hl_hl,
			ld_hl_xword, dec_hl, inc_l, dec_l, ld_l_byte, cpl, jr_nc,
			ld_sp_word, ld_xbyte_a, inc_sp, inc_xhl, dec_xhl, ld_xhl_byte, scf,
			jr_c, add_hl_sp, ld_a_xbyte, dec_sp, inc_a, dec_a, ld_a_byte, ccf,
			ld_b_b, ld_b_c, ld_b_d, ld_b_e, ld_b_h, ld_b_l, ld_b_xhl, ld_b_a,
			ld_c_b, ld_c_c, ld_c_d, ld_c_e, ld_c_h, ld_c_l, ld_c_xhl, ld_c_a,
			ld_d_b, ld_d_c, ld_d_d, ld_d_e, ld_d_h, ld_d_l, ld_d_xhl, ld_d_a,
			ld_e_b, ld_e_c, ld_e_d, ld_e_e, ld_e_h, ld_e_l, ld_e_xhl, ld_e_a,
			ld_h_b, ld_h_c, ld_h_d, ld_h_e, ld_h_h, ld_h_l, ld_h_xhl, ld_h_a,
			ld_l_b, ld_l_c, ld_l_d, ld_l_e, ld_l_h, ld_l_l, ld_l_xhl, ld_l_a,
			ld_xhl_b, ld_xhl_c, ld_xhl_d, ld_xhl_e, ld_xhl_h, ld_xhl_l, halt,
			ld_xhl_a, ld_a_b, ld_a_c, ld_a_d, ld_a_e, ld_a_h, ld_a_l, ld_a_xhl,
			ld_a_a, add_a_b, add_a_c, add_a_d, add_a_e, add_a_h, add_a_l,
			add_a_xhl, add_a_a, adc_a_b, adc_a_c, adc_a_d, adc_a_e, adc_a_h,
			adc_a_l, adc_a_xhl, adc_a_a, sub_b, sub_c, sub_d, sub_e, sub_h,
			sub_l, sub_xhl, sub_a, sbc_a_b, sbc_a_c, sbc_a_d, sbc_a_e, sbc_a_h,
			sbc_a_l, sbc_a_xhl, sbc_a_a, and_b, and_c, and_d, and_e, and_h,
			and_l, and_xhl, and_a, xor_b, xor_c, xor_d, xor_e, xor_h, xor_l,
			xor_xhl, xor_a, or_b, or_c, or_d, or_e, or_h, or_l, or_xhl, or_a,
			cp_b, cp_c, cp_d, cp_e, cp_h, cp_l, cp_xhl, cp_a, ret_nz, pop_bc,
			jp_nz, jp, call_nz, push_bc, add_a_byte, rst_00, ret_z, ret, jp_z,
			cb, call_z, call, adc_a_byte, rst_08, ret_nc, pop_de, jp_nc,
			out_byte_a, call_nc, push_de, sub_byte, rst_10, ret_c, exx, jp_c,
			in_a_byte, call_c, dd, sbc_a_byte, rst_18, ret_po, pop_hl, jp_po,
			ex_xsp_hl, null, push_hl, and_byte, rst_20, ret_pe, jp_hl, jp_pe,
			ex_de_hl, null, ed, xor_byte, rst_28, ret_p, pop_af, jp_p, di,
			call_p, push_af, or_byte, rst_30, ret_m, ld_sp_hl, jp_m, ei,
			call_m, fd, cp_byte, rst_38 };

	// ----------------------------------------------------------------------------------------

	

	public void setICount(int icount) {
		this.iCount = icount;
	}

	public int getICount() {
		return iCount;
	}
}
